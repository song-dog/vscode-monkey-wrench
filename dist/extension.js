var J=Object.create;var M=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var B=Object.getPrototypeOf,X=Object.prototype.hasOwnProperty;var Q=(t,o)=>{for(var d in o)M(t,d,{get:o[d],enumerable:!0})},G=(t,o,d,r)=>{if(o&&typeof o=="object"||typeof o=="function")for(let n of z(o))!X.call(t,n)&&n!==d&&M(t,n,{get:()=>o[n],enumerable:!(r=$(o,n))||r.enumerable});return t};var k=(t,o,d)=>(d=t!=null?J(B(t)):{},G(o||!t||!t.__esModule?M(d,"default",{value:t,enumerable:!0}):d,t)),Y=t=>G(M({},"__esModule",{value:!0}),t);var we={};Q(we,{activate:()=>se,deactivate:()=>re});module.exports=Y(we);var i=k(require("vscode"),1);var e=k(require("vscode"),1);var u=k(require("vscode"),1),Z=u.workspace.getConfiguration("monkey-wrench"),x=Z.get("metadata"),_=new u.SnippetString().appendText("// ==UserScript==").appendText(`
// @name         `).appendPlaceholder("Script name").appendText(`
// @namespace    `).appendPlaceholder(x.namespace).appendText(`
// @version      `).appendPlaceholder("0.1").appendText(`
// @description  `).appendPlaceholder("A brief summary to describe the script").appendText(`
// @author       `).appendPlaceholder(x.author).appendText(`
// @match        `).appendPlaceholder("*://*/*").appendText(`
// @icon         `).appendPlaceholder(x.icon).appendText(`
// @grant        `).appendPlaceholder("none").appendText(`
// ==/UserScript==`).appendText(`
`).appendText(`
(function () {`).appendText(`
	'use strict';`).appendText(`
	`).appendTabstop(0).appendText(`
})();`),ee=["none","unsafeWindow","window.onurlchange","window.close","window.focus","GM_addElement","GM.addElement","GM_addStyle","GM.addStyle","GM_download","GM.download","GM_getResourceText","GM.getResourceText","GM_getResourceURL","GM.getResourceURL","GM_info","GM.info","GM_log","GM.log","GM_notification","GM.notification","GM_openInTab","GM.openInTab","GM_registerMenuCommand","GM.registerMenuCommand","GM_unregisterMenuCommand","GM.unregisterMenuCommand","GM_setClipboard","GM.setClipboard","GM_getTab","GM.getTab","GM_saveTab","GM.saveTab","GM_getTabs","GM.getTabs","GM_setValue","GM.setValue","GM_getValue","GM.getValue","GM_deleteValue","GM.deleteValue","GM_listValues","GM.listValues","GM_addValueChangeListener","GM.addValueChangeListener","GM_removeValueChangeListener","GM.removeValueChangeListener","GM_xmlhttpRequest","GM.xmlHttpRequest","GM_webRequest","GM.webRequest","GM_cookie","GM.cookie"],S=new u.SnippetString().appendText("@grant ").appendChoice(ee),te=["ads","tracking","miner"],I=new u.SnippetString().appendText("@antifeature ").appendChoice(te),ne=["document-start","document-body","document-end","document-idle","context-menu"],R=new u.SnippetString().appendText("@run-at ").appendChoice(ne),oe=["raw","JavaScript","DOM"],L=new u.SnippetString().appendText("@sandbox ").appendChoice(oe),K=new u.SnippetString().appendText('@webRequest { "selector": ').appendPlaceholder("selector").appendText(', "action": ').appendPlaceholder("action").appendText(" }"),U=new u.SnippetString().appendText("GM_addElement(").appendPlaceholder("parentNode").appendText(", ").appendPlaceholder("tagName").appendText(`, {
	`).appendTabstop().appendText(`
});`),j=new u.SnippetString().appendText("GM_addElement(").appendPlaceholder("tagName").appendText(`, {
	`).appendTabstop().appendText(`
});`);function V(t){let o=(d,...r)=>{let{escapeSpecialCharacters:n=!1}=t,a=[...d].reduce((l,p,w)=>l+p+(r[w]||""),"").split(`
`).filter(l=>l.trim()!==""),s=Math.min(...a.map(l=>l.match(/^\s*/)[0].length));return a.map(l=>(l=l.substring(s),n?l.replace(/\\\n[ \t]*/g,"").replace(/\\`/g,"`").replace(/\\\$/g,"$").replace(/\\\{/g,"{"):l)).join(`
`)};return o.withOptions=d=>V({...t,...d}),o}var ie=V({}),c=ie;var f=[{label:"userscript metadata",completions:[{label:"userscript metadata",kind:e.CompletionItemKind.Snippet,detail:"userscript.metadata: <string>",insertText:_}]},{label:"@name",completions:[{label:"@name",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.name: <string>",documentation:new e.MarkdownString("The name of the script, shown in script list and menus. It must be unique within a `@namespace`. Internationalization is done by adding an appendix naming the locale.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.name: <string>","typescript").appendMarkdown("The name of the script, shown in script list and menus. It must be unique within a `@namespace`. Internationalization is done by adding an appendix naming the locale.").appendCodeblock(c`
          // @name     A test
          // @name:de  Ein Test
        `,"javascript")]},signatures:[{label:"@name <string>",parameters:[{label:"string",documentation:"The name of the script."}]}]},{label:"@namespace",completions:[{label:"@namespace",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.namespace: <string>",documentation:new e.MarkdownString("The combination of `@namespace` and `@name` is the unique identifier for a userscript.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.namespace: <string>","typescript").appendMarkdown("The combination of `@namespace` and `@name` is the unique identifier for a userscript. `@namespace` can be any string, for example the homepage of a group of userscripts by the same author.")]},signatures:[{label:"@namespace <string>",parameters:[{label:"string",documentation:"The name of the script."}]}]},{label:"@copyright",completions:[{label:"@copyright",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.copyright: <string>",documentation:new e.MarkdownString("A copyright statement shown at the header of the script\u2019s editor right below the script name.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.copyright: <string>","typescript").appendMarkdown("A copyright statement shown at the header of the script\u2019s editor right below the script name.")]},signatures:[{label:"@copyright <string>",parameters:[{label:"string",documentation:"The copyright statement."}]}]},{label:"@version",completions:[{label:"@version",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.version: <string>",documentation:new e.MarkdownString("The script version. This is used for the update check and needs to be increased at every update.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.version: <string>","typescript").appendMarkdown("The script version. This is used for the update check and needs to be increased at every update.\n\nIn this list, the next entry is considered to be a higher version number, eg: `Alpha-v1` < `Alpha-v2` and `16.4` == `16.04`.\n\n- `Alpha-v1`\n- `Alpha-v2`\n- `Alpha-v10`\n- `Beta`\n- `0.5pre3`\n- `0.5prelimiary`\n- `0.6pre4`\n- `0.6pre5`\n- `0.7pre4`\n- `0.7pre10`\n- `1.-1`\n- `1 == 1. == 1.0 == 1.0.0`\n- `1.1a`\n- `1.1aa`\n- `1.1ab`\n- `1.1b`\n- `1.1c`\n- `1.1.-1`\n- `1.1 == 1.1.0 == 1.1.00`\n- `1.1.1.1.1`\n- `1.1.1.1.2`\n- `1.1.1.1`\n- `1.10.0-alpha`\n- `1.10 == 1.10.0`\n- `1.11.0-0.3.7`\n- `1.11.0-alpha`\n- `1.11.0-alpha.1`\n- `1.11.0-alpha+1`\n- `1.12+1 == 1.12+1.0`\n- `1.12+1.1 == 1.12+1.1.0`\n- `1.12+2`\n- `1.12+2.1`\n- `1.12+3`\n- `1.12+4`\n- `1.12`\n- `2.0`\n- `16.4 == 16.04`\n- `2023-08-17.alpha`\n- `2023-08-17`\n- `2023-08-17_14-04 == 2023-08-17_14-04.0`\n- `2023-08-17+alpha`\n- 2023-09-11_14-0")]},signatures:[{label:"@version <string>",parameters:[{label:"string",documentation:"The script version."}]}]},{label:"@description",completions:[{label:"@description",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.description: <string>",documentation:new e.MarkdownString("A brief summary to describe the script.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.description: <string>","typescript").appendMarkdown("A brief summary to describe the script. Internationalization is done by adding an appendix naming the locale.").appendCodeblock(c`
          // @description    This userscript does wonderful things
          // @description:de Dieses Userscript tut wundervolle Dinge
        `,"javascript")]},signatures:[{label:"@description <string>",parameters:[{label:"string",documentation:"A brief summary to describe the script."}]}]},{label:"@icon",completions:[{label:"@icon",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.icon: <string>",documentation:new e.MarkdownString("The script icon in low resolution.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.icon: <string>","typescript").appendMarkdown("The script icon in low resolution.")]},signatures:[{label:"@icon <string>",parameters:[{label:"string",documentation:"The url to the script icon."}]}]},{label:"@iconURL",completions:[{label:"@iconURL",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.iconURL: <string>",documentation:new e.MarkdownString("The script icon in low resolution.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.iconURL: <string>","typescript").appendMarkdown("The script icon in low resolution.")]},signatures:[{label:"@iconURL <string>",parameters:[{label:"string",documentation:"The url to the script icon."}]}]},{label:"@defaulticon",completions:[{label:"@defaulticon",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.defaulticon: <string>",documentation:new e.MarkdownString("The script icon in low resolution.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.defaulticon: <string>","typescript").appendMarkdown("The script icon in low resolution.")]},signatures:[{label:"@defaulticon <string>",parameters:[{label:"string",documentation:"The url to the script icon."}]}]},{label:"@icon64",completions:[{label:"@icon64",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.icon64: <string>",documentation:new e.MarkdownString("This script\u2019s icon in 64x64 pixels.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.icon64: <string>","typescript").appendMarkdown("This script\u2019s icon in 64x64 pixels. If `@icon` is also given, the `@icon` image will be scaled and used instead at some places at the options page.")]},signatures:[{label:"@icon64 <string>",parameters:[{label:"string",documentation:"The url to the script icon."}]}]},{label:"@icon64URL",completions:[{label:"@icon64URL",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.icon64URL: <string>",documentation:new e.MarkdownString("This script\u2019s icon in 64x64 pixels.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.icon64URL: <string>","typescript").appendMarkdown("This script\u2019s icon in 64x64 pixels. If `@icon` is also given, the `@icon` image will be scaled and used instead at some places at the options page.")]},signatures:[{label:"@icon64URL <string>",parameters:[{label:"string",documentation:"The url to the script icon."}]}]},{label:"@grant",completions:[{label:"@grant",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.grant: <enum>",documentation:new e.MarkdownString("`@grant` is used to whitelist `GM_*` and `GM.*` functions, the `unsafeWindow` object and some powerful `window` functions. Multiple tag instances are allowed."),insertText:S,filterText:"@grant"},{label:"GM_addElement",kind:e.CompletionItemKind.Value,insertText:"GM_addElement"},{label:"GM_addStyle",kind:e.CompletionItemKind.Value,insertText:"GM_addStyle"},{label:"GM_download",kind:e.CompletionItemKind.Value,insertText:"GM_download"},{label:"GM_getResourceText",kind:e.CompletionItemKind.Value,insertText:"GM_getResourceText"},{label:"GM_getResourceURL",kind:e.CompletionItemKind.Value,insertText:"GM_getResourceURL"},{label:"GM_info",kind:e.CompletionItemKind.Value,insertText:"GM_info"},{label:"GM_log",kind:e.CompletionItemKind.Value,insertText:"GM_log"},{label:"GM_notification",kind:e.CompletionItemKind.Value,insertText:"GM_notification"},{label:"GM_openInTab",kind:e.CompletionItemKind.Value,insertText:"GM_openInTab"},{label:"GM_registerMenuCommand",kind:e.CompletionItemKind.Value,insertText:"GM_registerMenuCommand"},{label:"GM_unregisterMenuCommand",kind:e.CompletionItemKind.Value,insertText:"GM_unregisterMenuCommand"},{label:"GM_setClipboard",kind:e.CompletionItemKind.Value,insertText:"GM_setClipboard"},{label:"GM_getTab",kind:e.CompletionItemKind.Value,insertText:"GM_getTab"},{label:"GM_saveTab",kind:e.CompletionItemKind.Value,insertText:"GM_saveTab"},{label:"GM_getTabs",kind:e.CompletionItemKind.Value,insertText:"GM_getTabs"},{label:"GM_setValue",kind:e.CompletionItemKind.Value,insertText:"GM_setValue"},{label:"GM_getValue",kind:e.CompletionItemKind.Value,insertText:"GM_getValue"},{label:"GM_deleteValue",kind:e.CompletionItemKind.Value,insertText:"GM_deleteValue"},{label:"GM_listValues",kind:e.CompletionItemKind.Value,insertText:"GM_listValues"},{label:"GM_addValueChangeListener",kind:e.CompletionItemKind.Value,insertText:"GM_addValueChangeListener"},{label:"GM_removeValueChangeListener",kind:e.CompletionItemKind.Value,insertText:"GM_removeValueChangeListener"},{label:"GM.xmlHttpRequest",kind:e.CompletionItemKind.Value,insertText:"GM.xmlHttpRequest"},{label:"GM_webRequest",kind:e.CompletionItemKind.Value,insertText:"GM_webRequest"},{label:"GM_cookie",kind:e.CompletionItemKind.Value,insertText:"GM_cookie"},{label:"window.onurlchange",kind:e.CompletionItemKind.Value,insertText:"window.onurlchange"},{label:"window.close",kind:e.CompletionItemKind.Value,insertText:"window.close"},{label:"window.focus",kind:e.CompletionItemKind.Value,insertText:"window.focus"}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.grant: <enum>","typescript").appendMarkdown("`@grant` is used to whitelist `GM_*` and `GM.*` functions, the `unsafeWindow` object and some powerful `window` functions. Multiple tag instances are allowed.").appendCodeblock(c`
          // @grant none
          // @grant GM_setValue
          // @grant GM_getValue
          // @grant GM.setValue
          // @grant GM.getValue
          // @grant GM_setClipboard
          // @grant unsafeWindow
          // @grant window.close
          // @grant window.focus
          // @grant window.onurlchange
        `,"javascript").appendMarkdown("If `@grant` is `none`, the `sandbox` is disabled. In this mode, `GM_info` will be available, but none of the `GM_*` functions will be. If no `@grant` tag is given, an empty list is assumed, however, this is different from using `none`.")]},signatures:[{label:"@grant <enum>",parameters:[{label:"enum",documentation:"The name of the entity to whitelist in the script."}]}]},{label:"@author",completions:[{label:"@author",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.author: <string>",documentation:new e.MarkdownString("The script\u2019s author.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.author: <string>","typescript").appendMarkdown("The script\u2019s author.")]},signatures:[{label:"@author <string>",parameters:[{label:"string",documentation:"The script\u2019s author."}]}]},{label:"@homepage",completions:[{label:"@homepage",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.homepage: <string>",documentation:new e.MarkdownString("The author\u2019s homepage that is used at the options page to link from the script\u2019s name to the given page. If the `@namespace` tag starts with `http://` or `https://`, its content will be used for this too.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.homepage: <string>","typescript").appendMarkdown("The author\u2019s homepage that is used at the options page to link from the script\u2019s name to the given page. If the `@namespace` tag starts with `http://` or `https://`, its content will be used for this too.")]},signatures:[{label:"@homepage <string>",parameters:[{label:"string",documentation:"The URL to the author\u2019s homepage."}]}]},{label:"@homepageURL",completions:[{label:"@homepageURL",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.homepageURL: <string>",documentation:new e.MarkdownString("If supplied, the home icon in the userscripts list will link to this.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.homepageURL: <string>","typescript").appendMarkdown("If supplied, the home icon in the userscripts list will link to this.")]},signatures:[{label:"@homepageURL <string>",parameters:[{label:"string",documentation:"The URL to the author\u2019s homepage."}]}]},{label:"@website",completions:[{label:"@website",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.website: <string>",documentation:new e.MarkdownString("The author\u2019s website that is used at the options page to link from the script\u2019s name to the given page. If the `@namespace` tag starts with `http://` or `https://`, its content will be used for this too.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.website: <string>","typescript").appendMarkdown("The author\u2019s website that is used at the options page to link from the script\u2019s name to the given page. If the `@namespace` tag starts with `http://` or `https://`, its content will be used for this too.")]},signatures:[{label:"@website <string>",parameters:[{label:"string",documentation:"The URL to the author\u2019s website."}]}]},{label:"@source",completions:[{label:"@source",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.source: <string>",documentation:new e.MarkdownString("The source of the script that is used at the options page to link from the script\u2019s name to the given page.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.source: <string>","typescript").appendMarkdown("The source of the script that is used at the options page to link from the script\u2019s name to the given page.")]},signatures:[{label:"@source <string>",parameters:[{label:"string",documentation:"The URL to the script\u2019s source."}]}]},{label:"@antifeature",completions:[{label:"@antifeature",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.antifeature: <enum> <string>",documentation:new e.MarkdownString("Allows script developers to disclose whether they monetize their scripts (required by [GreasyFork](https://greasyfork.org/)). Internationalization is done by adding an appendix naming the locale."),insertText:I,filterText:"@antifeature"},{label:"ads",kind:e.CompletionItemKind.Value,insertText:"ads "},{label:"tracking",kind:e.CompletionItemKind.Value,insertText:"tracking "},{label:"miner",kind:e.CompletionItemKind.Value,insertText:"miner "}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.antifeature: <enum> <string>","typescript").appendMarkdown("Allows script developers to disclose whether they monetize their scripts (required by [GreasyFork](https://greasyfork.org/)). Internationalization is done by adding an appendix naming the locale.").appendCodeblock(c`
          // @antifeature     ads       We show you ads
          // @antifeature:fr  ads       Nous vous montrons des publicités
          // @antifeature     tracking  We have some sort of analytics included
          // @antifeature     miner     We use your computer\u2019s resources to mine a crypto currency
        `,"javascript")]},signatures:[{label:"@antifeature <enum> <string>",parameters:[{label:"enum",documentation:"The antifeature name."},{label:"string",documentation:"The antifeature description."}]}]},{label:"@require",completions:[{label:"@require",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.require: <string>",documentation:new e.MarkdownString("The URL to a JavaScript file that is loaded and executed before the userscript itself starts running.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.require: <string>","typescript").appendMarkdown('The URL to a JavaScript file that is loaded and executed before the userscript itself starts running. URL may be relative to the URL the script is being installed from. Scripts loaded via `@require` and their *"use strict"* statements might affect the userscript\u2019s strict mode. See [sub-resource integrity](https://www.tampermonkey.net/documentation.php?locale=en#api:Subresource_Integrity) for information on how to ensure integrity. Multiple tag instances are allowed.').appendCodeblock(c`
          // @require https://code.jquery.com/jquery-2.1.4.min.js
          // @require https://code.jquery.com/jquery-2.1.3.min.js#sha256=23456...
          // @require https://code.jquery.com/jquery-2.1.2.min.js#md5=34567...,sha256=6789...
          // @require tampermonkey://vendor/jquery.js
          // @require tampermonkey://vendor/jszip/jszip.js
        `,"javascript")]},signatures:[{label:"@require <string>",parameters:[{label:"string",documentation:"The URL to the JavaScript file."}]}]},{label:"@resource",completions:[{label:"@resource",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.resource: <string> <string>",documentation:new e.MarkdownString("Preloads resources that can by accessed via `GM_getResourceURL` and `GM_getResourceText` in the script.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.resource: <string> <string>","typescript").appendMarkdown("Preloads resources that can by accessed via `GM_getResourceURL` and `GM_getResourceText` in the script. See [sub-resource integrity](https://www.tampermonkey.net/documentation.php?locale=en#api:Subresource_Integrity) for information on how to ensure integrity. Multiple tag instances are allowed.").appendCodeblock(c`
          // @resource icon1        http://www.tampermonkey.net/favicon.ico
          // @resource icon2        /images/icon.png
          // @resource html         http://www.tampermonkey.net/index.html
          // @resource xml          http://www.tampermonkey.net/crx/tampermonkey.xml
          // @resource SRIsecured1  http://www.tampermonkey.net/favicon.ico#md5=123434...
          // @resource SRIsecured2  http://www.tampermonkey.net/favicon.ico#md5=123434...;sha256=234234...
        `,"javascript")]},signatures:[{label:"@resource <string> <string>",parameters:[{label:[11,17],documentation:"The unique name of the resource."},{label:[20,26],documentation:"The URL of the resource."}]}]},{label:"@include",completions:[{label:"@include",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.include: <string>",documentation:new e.MarkdownString("The pages on which script should run. Multiple tag instances are allowed.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.include: <string>","typescript").appendMarkdown("The pages on which script should run. Multiple tag instances are allowed. `@include` doesn't support the URL hash parameter. You have to match the path without the hash parameter and make use of [window.onurlchange](https://www.tampermonkey.net/documentation.php?locale=en#api:window.onurlchange).").appendCodeblock(c`
          // @include http://www.tampermonkey.net/*
          // @include http://*
          // @include https://*
          // @include /^https:\/\/www\.tampermonkey\.net\/.*$/
          // @include *
        `).appendMarkdown("When writing something like `*://tmnk.net/*`, many script developers expect the script to run at `tmnk.net` only, but this is not the case. It also runs at `https://example.com/?http://tmnk.net/` as well.\n\nTherefore, Tampermonkey interprets `@includes` that contain a `://` a little bit like `@match`. Every `*` before `://` only matches everything except `:` characters to make sure only the URL scheme is matched. Also, if such an `@include` contains a `/` after `://`, then everything between those strings is treated as host, matching everything except `/` characters. The same applies to `*` directly following `://`.")]},signatures:[{label:"@include <string>",parameters:[{label:"string",documentation:"The URL pattern to include."}]}]},{label:"@match",completions:[{label:"@match",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.match: <string>",documentation:new e.MarkdownString("The `@match` directive is a URL pattern that matches the web pages that your script should run on. Wildcards and multiple tag instances are allowed.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.match: <string>","typescript").appendMarkdown("The `@match` directive is a URL pattern that matches the web pages that your script should run on. Wildcards and multiple tag instances are allowed.\n\nSee [match patterns](https://developer.chrome.com/docs/extensions/mv2/match_patterns/) for more information. **Note:** The `<all_urls>` statement is not yet supported.").appendCodeblock(c`
          // @match \u002A://\u002A/\u002A
          // @match https://\u002A/\u002A
          // @match http://\u002A/foo\u002A
          // @match https://\u002A.tampermonkey.net/foo\u002Abar
        `,"javascript")]},signatures:[{label:"@match <string>",parameters:[{label:"string",documentation:"A pattern to match URLs against."}]}]},{label:"@exclude",completions:[{label:"@exclude",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.exclude: <string>",documentation:new e.MarkdownString("Exclude URLs even if they are included by `@include` or `@match`. Multiple tag instances are allowed.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.exclude: <string>","typescript").appendMarkdown("Exclude URLs even if they are included by `@include` or `@match`. Multiple tag instances are allowed.")]},signatures:[{label:"@exclude <string>",parameters:[{label:"string",documentation:"The URL to exclude."}]}]},{label:"@run-at",completions:[{label:"@run-at",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.run-at: <enum>",documentation:new e.MarkdownString("Defines the moment the script is injected. In opposition to other script handlers, `@run-at` defines the first possible moment a script wants to run."),insertText:R,filterText:"@run-at"},{label:"document-start",kind:e.CompletionItemKind.Value,insertText:"document-start"},{label:"document-body",kind:e.CompletionItemKind.Value,insertText:"document-body"},{label:"document-end",kind:e.CompletionItemKind.Value,insertText:"document-end"},{label:"document-idle",kind:e.CompletionItemKind.Value,insertText:"document-idle"},{label:"context-menu",kind:e.CompletionItemKind.Value,insertText:"context-menu"}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.run-at: <enum>","typescript").appendMarkdown("Defines the moment the script is injected. In opposition to other script handlers, `@run-at` defines the first possible moment a script wants to run. This means it may happen, that a script that uses the `@require` tag may be executed after the document is already loaded, because fetching the required script took that long. Regardless, all `DOMNodeInserted` and `DOMContentLoaded` events that happened after the given injection moment are cached and delivered to the script when it is injected.").appendCodeblock("// @run-at document-start").appendMarkdown("The script will be injected as fast as possible.").appendCodeblock("// @run-at document-body").appendMarkdown("The script will be injected if the body element exists.").appendCodeblock("// @run-at document-end").appendMarkdown("The script will be injected when or after the DOMContentLoaded event was dispatched.").appendCodeblock("// @run-at document-idle").appendMarkdown("The script will be injected after the DOMContentLoaded event was dispatched. This is the default value if no @run-at tag is given.").appendCodeblock("// @run-at context-menu").appendMarkdown("The script will be injected if it is clicked at the browser context menu. All `@include` and `@exclude` statements will be ignored if this value is used, but this may change in the future.")]},signatures:[{label:"@run-at <enum>",parameters:[{label:"enum",documentation:"The load event during which to execute the script."}]}]},{label:"@sandbox",completions:[{label:"@sandbox",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.sandbox: <enum>",documentation:new e.MarkdownString("`@sandbox` allows userscript authors to specify execution context by denoting one of the three possible environments."),insertText:L},{label:"raw",kind:e.CompletionItemKind.Value,insertText:"raw"},{label:"JavaScript",kind:e.CompletionItemKind.Value,insertText:"tracking "},{label:"DOM",kind:e.CompletionItemKind.Value,insertText:"miner "}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.sandbox: <enum>","typescript").appendMarkdown("Userscript execution happens in one of three possible environments:\n\n- `MAIN_WORLD` - the page.\n- `ISOLATED_WORLD` - the extension\u2019s content script.\n- `USERSCRIPT_WORLD` - a special context created for userscripts.\n\n `@sandbox` allows userscript authors to specify execution context by denoting one of the following arguments:\n\n- `raw` - For compatibility reasons, the userscript always needs to run in page context, the `MAIN_WORLD` (default if `@sandbox` is omitted). If injection into the `MAIN_WORLD` is not possible (e.g. because of a CSP), the userscript will be injected into other (enabled) sandboxes according to the order of this list.\n- `JavaScript` - The script needs access to `unsafeWindow`. In Firefox, a special context, the `USERSCRIPT_WORLD`, is created which also bypasses existing CSP\u2019s. This however, may be an issue because [`cloneInto` and `exportFunction`](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Sharing_objects_with_page_scripts) are then necessary to share objects with the page. `raw` mode is used as a fallback in other browsers.\n- `DOM` - Use this mode if the script only needs DOM access and no direct `unsafeWindow` access. If [enabled](https://www.tampermonkey.net/faq#Q404), these scripts are executed inside the extension context, the `ISOLATED_WORLD`, or at any other enabled context otherwise, because they all grant DOM access.").appendCodeblock("// @sandbox JavaScript")]},signatures:[{label:"@sandbox <enum>",parameters:[{label:"enum",documentation:"The execution context of the script."}]}]},{label:"@connect",completions:[{label:"@connect",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.connect: <string>",documentation:new e.MarkdownString("The domains / subdomains which are allowed to be retrieved by `GM_xmlhttpRequest`. Top-level domains are not allowed. Multiple tag instances are allowed.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.connect: <string>","typescript").appendMarkdown('The domains / subdomains which are allowed to be retrieved by `GM_xmlhttpRequest`. Top-level domains are not allowed. Multiple tag instances are allowed.\n\nCan be:\n- a domain name like `example.com` (this will also allow all subdomains).\n- a subdomain name like subdomain.example.com.\n- `self` - the current domain.\n- localhost to access the localhost.\n- an IP address like `127.0.0.1`.\n- `*` - all domains.\nIf it\u2019s not possible to declare all domains a userscript might connect to then it\u2019s good practice to do the following:\n\n1. Declare _all known_ or at least _all common_ domains that might be connected by the script to avoid the confirmation dialog for most users.\n2. Specify `@connect *` to allow Tampermonkey to offer an "Always allow all domains" button.\n\nUsers can also whitelist all requests by adding `*` to the user domain whitelist at the script settings tab.\n\nBoth the initial and the final URL will be checked. For backwards compatibility to Scriptish, `@domain` tags are interpreted as well.').appendCodeblock(c`
          // @connect tmnk.net
          // @connect www.tampermonkey.net
          // @connect self
          // @connect localhost
          // @connect 8.8.8.8
          // @connect *
        `,"javascript")]},signatures:[{label:"@connect <string>",parameters:[{label:"string",documentation:"The domain / subdomain to be retrieved."}]}]},{label:"@noframes",completions:[{label:"@noframes",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.noframes: <boolean>",documentation:new e.MarkdownString("When present, the script will execute only in the top level document, and not in nested frames.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.noframes: <boolean>","typescript").appendMarkdown("When present, the script will execute only in the top level document, and not in nested frames.")]}},{label:"@updateURL",completions:[{label:"@updateURL",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.updateURL: <string>",documentation:new e.MarkdownString("An update URL for the userscript. A `@version` tag is required to make update checks work.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.updateURL: <string>","typescript").appendMarkdown("An update URL for the userscript. A `@version` tag is required to make update checks work.")]},signatures:[{label:"@updateURL <string>",parameters:[{label:"string",documentation:"The URL to the update script."}]}]},{label:"@downloadURL",completions:[{label:"@downloadURL",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.downloadURL: <string>",documentation:new e.MarkdownString("Defines the URL where the script will be downloaded from when an update was detected. If the value `none` is used, then no update check will be done.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.downloadURL: <string>","typescript").appendMarkdown("Defines the URL where the script will be downloaded from when an update was detected. If the value `none` is used, then no update check will be done.")]},signatures:[{label:"@downloadURL <string>",parameters:[{label:"string",documentation:"The URL to download the script from."}]}]},{label:"@supportURL",completions:[{label:"@supportURL",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.supportURL: <string>",documentation:new e.MarkdownString("The URL to be used for bug reporting, feature requests, etc.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.supportURL: <string>","typescript").appendMarkdown("The URL to be used for bug reporting, feature requests, etc.")]},signatures:[{label:"@supportURL <string>",parameters:[{label:"string",documentation:"The URL for user support."}]}]},{label:"@webRequest",completions:[{label:"@webRequest",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.webRequest: <object>",documentation:new e.MarkdownString("`@webRequest` takes a JSON object that matches the `rule` parameter of a `GM_webRequest`. It allows the rules to apply even before the userscript is loaded."),insertText:K}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.webRequest: <object>","typescript").appendMarkdown("`@webRequest` takes a JSON object that matches the `rule` parameter of a `GM_webRequest`. It allows the rules to apply even before the userscript is loaded.")]},signatures:[{label:"@webRequest <object>",parameters:[{label:"object",documentation:"A JSON object matching the `rule` parameter of a `GM_webRequest`."}]}]},{label:"@unwrap",completions:[{label:"@unwrap",kind:e.CompletionItemKind.Field,detail:"(property) userscript.metadata.unwrap: <boolean>",documentation:new e.MarkdownString("Injects the userscript into the page without any wrapper or sandbox.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("(property) userscript.metadata.unwrap: <boolean>","typescript").appendMarkdown("Injects the userscript into the page without any wrapper or sandbox.")]}}],y=[{label:"unsafeWindow",completions:[{label:"unsafeWindow",kind:e.CompletionItemKind.Variable,detail:"var unsafeWindow: Window & typeof globalThis",documentation:new e.MarkdownString("The `unsafeWindow` object provides access to the `window` object of the page that Greasemonkey is running on, rather than the `window` object of the Greasemonkey extension."),commitCharacters:["."]}],hover:{contents:[new e.MarkdownString().appendCodeblock("var unsafeWindow: Window & typeof globalThis","typescript").appendMarkdown("The `unsafeWindow` object provides access to the `window` object of the page that Greasemonkey is running on, rather than the `window` object of the Greasemonkey extension. This can be useful in certain cases such as when a userscript needs to access a JavaScript library or variable that is defined on the page.")]}},{label:"GM_addElement",completions:[{label:"GM_addElement",kind:e.CompletionItemKind.Function,detail:"function GM_addElement(parentNode: HTMLElement, tagName: string, attributes: { [key: string]: string | boolean | number }): HTMLElement (+1 overload)",documentation:new e.MarkdownString("Creates an HTML element specified by `tagName`, applies all given `attributes`, and returns the injected HTML element."),insertText:U},{label:"GM_addElement",kind:e.CompletionItemKind.Function,detail:"function GM_addElement(tagName: string, attributes: { [key: string]: string | boolean | number }): HTMLElement (+1 overload)",documentation:new e.MarkdownString("Creates an HTML element specified by `tagName`, applies all given `attributes`, and returns the injected HTML element."),insertText:j}],hover:{contents:[new e.MarkdownString().appendCodeblock("function GM_addElement(parentNode: HTMLElement, tagName: string, attributes: { [key: string]: string | boolean | number }): HTMLElement (+1 overload)","typescript").appendMarkdown("Creates an HTML element specified by `tagName`, applies all given `attributes`, and returns the injected HTML element. The injected element will be appended to the document\u2019s head or body unless a `parentNode` is given, in which case the new element is appended to it instead. Any attribute that is valid on for the element type specified by the `tagName` is allowed in `attributes`.").appendCodeblock(c`
          GM_addElement('script', {
            textContent: 'window.foo = "bar";'
          });

          GM_addElement('script', {
            src: 'https://example.com/script.js',
            type: 'text/javascript'
          });

          GM_addElement(document.getElementsByTagName('div')[0], 'img', {
            src: 'https://example.com/image.png'
          });

          GM_addElement(shadowDOM, 'style', {
            textContent: 'div { color: black; };'
          });
        `,"javascript")]},signatures:[{label:"GM_addElement(parentNode: HTMLElement, tagName: string, attributes: ElementAttributes): HTMLElement",parameters:[{label:"parentNode: HTMLElement",documentation:"The parent node to append the new element to."},{label:"tagName: string",documentation:"The type of element to create."},{label:"attributes: ElementAttributes",documentation:"An object containing the attributes to apply to the new element."}]},{label:"GM_addElement(tagName: string, attributes: ElementAttributes): HTMLElement",parameters:[{label:"tagName: string",documentation:"The type of element to create."},{label:"attributes: ElementAttributes",documentation:"An object containing the attributes to apply to the new element."}]}]},{label:"GM_addStyle",completions:[{label:"GM_addStyle",kind:e.CompletionItemKind.Function,detail:"function GM_addStyle(css: string): HTMLStyleElement",documentation:new e.MarkdownString("Adds the given style to the document and returns the injected style element.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("function GM_addStyle(css: string): HTMLStyleElement").appendMarkdown("Adds the given style to the document and returns the injected style element.")]},signatures:[{label:"GM_addStyle(css: string): HTMLStyleElement",parameters:[{label:"css: string",documentation:"A string containing the CSS to add to the document."}]}]},{label:"GM_download",completions:[{label:"GM_download",kind:e.CompletionItemKind.Function,detail:"function GM_download(details: DownloadDetails): DownloadResponse (+1 overload)",documentation:new e.MarkdownString("Downloads a URL to a local file.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("function GM_download(details: DownloadDetails): DownloadResponse (+1 overload)","typescript").appendMarkdown("Downloads a URL to a local file.").appendCodeblock(c`
          GM_download('http://example.com/file.txt', 'file.txt');

          const download = GM_download({
            url: 'http://example.com/file.txt',
            name: 'file.txt',
            saveAs: true
          });

          // cancel download after 5 seconds
          window.setTimeout(() => download.abort(), 5000);
        `)]},signatures:[{label:"function GM_download(details: DownloadDetails): DownloadResponse (+1 overload)",parameters:[{label:"details: DownloadDetails",documentation:new e.MarkdownString().appendCodeblock(c`
              type DownloadDetails = {
                url: string;
                name: string;
                headers?: { [key: string]: string };
                saveAs: boolean;
                conflictAction: string;
                onload?: () => void;
                onerror?: (error: DownloadError) => void;
                onprogress?: () => void;
                ontimeout?: () => void;
              }
            `,"typescript").appendMarkdown("The details of the download request.")}]},{label:"function GM_download(url: string, name: string): DownloadResponse (+1 overload)",parameters:[{label:"url: string",documentation:"The URL to download."},{label:"name: string",documentation:"The name of the file to save as."}]}]},{label:"GM_getResourceText",completions:[{label:"GM_getResourceText",kind:e.CompletionItemKind.Function,detail:"function GM_getResourceText(name: string): string",documentation:new e.MarkdownString("Access the text of a resource (such as a JavaScript or CSS file) that has been included in a userscript via `@resource`.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("function GM_getResourceText(name: string): string","typescript").appendMarkdown("Access the text of a resource (such as a JavaScript or CSS file) that has been included in a userscript via `@resource`.").appendCodeblock(c`
          const scriptText = GM_getResourceText('myscript.js');
          const scriptText2 = await GM.getResourceText('myscript.js');
          const script = document.createElement('script');
          script.textContent = scriptText;
          document.body.appendChild(script);
        `,"javascript")]},signatures:[{label:"function GM_getResourceText(name: string): string",parameters:[{label:"name: string",documentation:"The name of the resource to retrieve."}]}]},{label:"GM_getResourceURL",completions:[{label:"GM_getResourceURL",kind:e.CompletionItemKind.Function,detail:"function GM_getResourceURL(name: string): string",documentation:new e.MarkdownString("Access the URL of a resource (such as a CSS file or image file) that has been included in a userscript via `@resource`.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("function GM_getResourceURL(name: string): string","typescript").appendMarkdown("Access the URL of a resource (such as a CSS file or image file) that has been included in a userscript via `@resource`.")]},signatures:[{label:"function GM_getResourceURL(name: string): string",parameters:[{label:"name: string",documentation:"The name of the resource to retrieve."}]}]},{label:"GM_info",completions:[{label:"GM_info",kind:e.CompletionItemKind.Interface,detail:"type GM_info = { downloadMode: string; isIncognito: boolean; relaxedCsp: string; sandboxMode: SandboxMode; script: Script; scriptHandler: string; scriptMetaStr: string | null; scriptUpdateURL: string | null; scriptWillUpdate: boolean; userAgentData: UserAgentData; version?: string; }",documentation:new e.MarkdownString("An object that exposes information about the current userscript.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("type GM_info = { downloadMode: string; isIncognito: boolean; relaxedCsp: string; sandboxMode: SandboxMode; script: Script; scriptHandler: string; scriptMetaStr: string | null; scriptUpdateURL: string | null; scriptWillUpdate: boolean; userAgentData: UserAgentData; version?: string; }","typescript").appendMarkdown("An object that exposes information about the current userscript.")]}},{label:"GM_log",completions:[{label:"GM_log",kind:e.CompletionItemKind.Function,detail:"function GM_log(message: any): void",documentation:new e.MarkdownString("Log a message to the console.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("function GM_log(message: any): void","typescript").appendMarkdown("Log a message to the console.")]},signatures:[{label:"function GM_log(message: any): void",parameters:[{label:"message: any",documentation:"The message to log."}]}]},{label:"GM_notification",completions:[{label:"GM_notification",kind:e.CompletionItemKind.Function,detail:"function GM_notification(details: NotificationDetails): void (+1 overload)",documentation:new e.MarkdownString("Shows an HTML5 Desktop notification and / or highlights the current tab.")}],hover:{contents:[new e.MarkdownString().appendCodeblock("function GM_notification(details: NotificationDetails): void (+1 overload)","typescript").appendMarkdown("Shows an HTML5 Desktop notification and / or highlights the current tab.")]},signatures:[{label:"function GM_notification(details: NotificationDetails): void (+1 overload)",parameters:[{label:"details: NotificationDetails",documentation:new e.MarkdownString().appendCodeblock(c`
              type NotificationDetails = {
                text: string;
                title?: string;
                tag?: string;
                image?: string;
                highlight?: boolean;
                silent?: boolean;
                timeout?: number;
                url?: string;
                onclick?: () => void;
                ondone?: () => void;
              }
            `,"typescript").appendMarkdown("The details of the notification.")}]},{label:"function GM_notification(text: string, title?: string, image?: string, onclick?: () => void): void",parameters:[{label:"text: string",documentation:"The text of the notification."},{label:"title?: string",documentation:"The title of the notification."},{label:"image?: string",documentation:"The URL of the image to display in the notification."},{label:"onclick?: () => void",documentation:"A function to run when the notification is clicked."}]}]},{label:"GM_openInTab",completions:[{label:"GM_openInTab",kind:e.CompletionItemKind.Function,detail:"function GM_openInTab(url: string, options?: OpenInTabOptions): OpenInTabResponse (+1 overload)",documentation:new e.MarkdownString("Opens URL in a new tab.")}],hover:{contents:[]},signatures:[]},{label:"GM_registerMenuCommand",completions:[{label:"GM_registerMenuCommand",kind:e.CompletionItemKind.Function,detail:"function GM_registerMenuCommand(name: string, callback: () => void, options?: RegisterMenuCommandOptions): string | number (+1 overload)",documentation:new e.MarkdownString(`Add a new entry to the userscript\u2019s menu in the browser, and specify a function to be called when the menu item is selected.

The function return a menu entry ID that can be used to unregister the command.`)}],hover:{contents:[]},signatures:[]},{label:"GM_unregisterMenuCommand",completions:[{label:"GM_unregisterMenuCommand",kind:e.CompletionItemKind.Function,detail:"function GM_unregisterMenuCommand(id: string | number): void",documentation:new e.MarkdownString("Unregister a menu command that was previously registered by `GM_registerMenuCommand` with the given menu command ID.")}],hover:{contents:[]},signatures:[]},{label:"GM_setClipboard",completions:[{label:"GM_setClipboard",kind:e.CompletionItemKind.Function,detail:"function GM_setClipboard(data: string, info?: string | ClipboardInfo, callback?: () => void): void",documentation:new e.MarkdownString("Sets the text of the clipboard to a specified value.")}],hover:{contents:[]},signatures:[]},{label:"GM_getTab",completions:[{label:"GM_getTab",kind:e.CompletionItemKind.Function,detail:"function GM_getTab(callback: (tab: Tab) => void): void",documentation:new e.MarkdownString("Get a object that is persistent as long as this tab is open.")}],hover:{contents:[]},signatures:[]},{label:"GM_saveTab",completions:[{label:"GM_saveTab",kind:e.CompletionItemKind.Function,detail:"function GM_saveTab(tab: Tab, callback?: () => void): void",documentation:new e.MarkdownString("Save the tab object to reopen it after a page unload.")}],hover:{contents:[]},signatures:[]},{label:"GM_getTabs",completions:[{label:"GM_getTabs",kind:e.CompletionItemKind.Function,detail:"function GM_getTabs(callback: (tabs: Tabs) => void): void",documentation:new e.MarkdownString("Get all tab objects as a hash to communicate with other script instances.")}],hover:{contents:[]},signatures:[]},{label:"GM_setValue",completions:[{label:"GM_setValue",kind:e.CompletionItemKind.Function,detail:"function GM_setValue(key: string, value: any): void",documentation:new e.MarkdownString("Sets a key / value pair for current script to storage.")}],hover:{contents:[]},signatures:[]},{label:"GM_getValue",completions:[{label:"GM_getValue",kind:e.CompletionItemKind.Function,detail:"function GM_getValue(key: string, defaultValue?: any): any",documentation:new e.MarkdownString("Retrieves a value for current script from storage.")}],hover:{contents:[]},signatures:[]},{label:"GM_deleteValue",completions:[{label:"GM_deleteValue",kind:e.CompletionItemKind.Function,detail:"function GM_deleteValue(key: string): void",documentation:new e.MarkdownString("Deletes an existing key / value pair for current script from storage.")}],hover:{contents:[]},signatures:[]},{label:"GM_listValues",completions:[{label:"GM_listValues",kind:e.CompletionItemKind.Function,detail:"function GM_listValues(): string[]",documentation:new e.MarkdownString("Returns an array of keys of all available values within this script.")}],hover:{contents:[]},signatures:[]},{label:"GM_addValueChangeListener",completions:[{label:"GM_addValueChangeListener",kind:e.CompletionItemKind.Function,detail:"function GM_addValueChangeListener(key: string, callback: (key: string, oldValue: any, newValue: any, remote: boolean) => void): string",documentation:new e.MarkdownString("Adds a change listener to the storage and returns the listener ID.")}],hover:{contents:[]},signatures:[]},{label:"GM_removeValueChangeListener",completions:[{label:"GM_removeValueChangeListener",kind:e.CompletionItemKind.Function,detail:"function GM_removeValueChangeListener(id: number): void",documentation:new e.MarkdownString("Removes a change listener by its ID.")}],hover:{contents:[]},signatures:[]},{label:"GM_xmlHttpRequest",completions:[{label:"GM_xmlHttpRequest",kind:e.CompletionItemKind.Function,detail:"function GM_xmlhttpRequest(details: XMLHttpRequestDetails): { abort: () => void }",documentation:new e.MarkdownString("Makes a request like XMLHttpRequest, with some special capabilities, not restricted by same-origin policy.")}],hover:{contents:[]},signatures:[]},{label:"GM_webRequest",completions:[{label:"GM_webRequest",kind:e.CompletionItemKind.Function,detail:"function GM_webRequest(rules: WebRequestRule[], listener: (info: WebRequestInfo, message: WebRequestMessage, details: WebRequestDetails) => void): void",documentation:new e.MarkdownString("`GM_webRequest` (re-)registers rules for web request manipulations and the listener of triggered rules. If you need to just register rules it's better to use `@webRequest` header. Note, webRequest proceeds only requests with types `sub_frame`, `script`, `xhr` and `websocket`.")}],hover:{contents:[]},signatures:[]},{label:"GM_cookie",completions:[{label:"GM_cookie",kind:e.CompletionItemKind.Interface,detail:"type GM_cookie = { list(details: GM_cookie.ListDetails, callback: (cookies: Cookie[], error?: string) => void): void; set(details: GM_cookie.SetDetails, callback: (error?: string) => void): void; delete(details: GM_cookie.DeleteDetails, callback: (error?: string) => void): void; }",documentation:new e.MarkdownString("Note: the GM_cookie API is experimental and might return a `not supported` error at some Tampermonkey versions.\n\nTampermonkey checks if the script has `@include` or `@match` access to given `details.url` arguments!")}],hover:{contents:[]},signatures:[]},{label:"GM_cookie.list",completions:[{label:"GM_cookie.list",kind:e.CompletionItemKind.Method,detail:"(method) list(details: GM_cookie.ListDetails, callback: (cookies: Cookie[], error?: string) => void): void",documentation:new e.MarkdownString("Retrieve cookies.")}],hover:{contents:[]},signatures:[]},{label:"GM_cookie.set",completions:[{label:"GM_cookie.set",kind:e.CompletionItemKind.Method,detail:"(method) set(details: GM_cookie.SetDetails, callback: (error?: string) => void): void",documentation:new e.MarkdownString("Sets a cookie with the given details. Supported properties are defined [here](https://developer.chrome.com/extensions/cookies#method-set).")}],hover:{contents:[]},signatures:[]},{label:"GM_cookie.delete",completions:[{label:"GM_cookie.delete",kind:e.CompletionItemKind.Method,detail:"(method) delete(details: GM_cookie.DeleteDetails, callback: (error?: string) => void): void",documentation:new e.MarkdownString("Deletes a cookie.")}],hover:{contents:[]},signatures:[]},{label:"window.onurlchange",completions:[{label:"window.onurlchange",kind:e.CompletionItemKind.Property,detail:"(property) onurlchange: (this: Window, ev: CustomEvent) => any",documentation:new e.MarkdownString("Fired when the URL of the tab changes.")}],hover:{contents:[]},signatures:[]},{label:"window.close",completions:[{label:"window.close",kind:e.CompletionItemKind.Method,detail:"(method) close(): void",documentation:new e.MarkdownString("Fired when the tab is closed.")}],hover:{contents:[]},signatures:[]},{label:"window.focus",completions:[{label:"window.focus",kind:e.CompletionItemKind.Method,detail:"(method) focus(): void",documentation:new e.MarkdownString("Fired when the tab is focused.")}],hover:{contents:[]},signatures:[]}];var g=require("fs"),A=require("path"),h=k(require("vscode"),1);function m(t){let o=h.workspace.workspaceFolders;if(o&&o.length>0){let d=o[0].uri.fsPath,r=(0,A.join)(d,`${t}.json`);if((0,g.existsSync)(r))try{let n=JSON.parse((0,g.readFileSync)(r,"utf8"));t==="jsconfig"||t==="tsconfig"?(n.compilerOptions||(n.compilerOptions={}),n.compilerOptions.typeRoots||(n.compilerOptions.typeRoots=[]),n.compilerOptions.typeRoots.push("./node_modules/@types"),n.compilerOptions.typeRoots.push("@types")):t===".eslintrc"&&(n.env||(n.env={}),n.env.greasemonkey=!0),(0,g.writeFileSync)(r,JSON.stringify(n,null,2)),console.log(`\`${t}.json\` updated successfully.`)}catch(n){h.window.showErrorMessage(`Error updating \`${t}.json\`: ${n}`,"OK","Retry").then(a=>{a==="Retry"&&m(t)})}else h.window.showErrorMessage(`No \`${t}.json\` found.`,"OK","Create").then(n=>{if(n==="Create"){let a;t==="jsconfig"||t==="tsconfig"?a={compilerOptions:{typeRoots:["./node_modules/@types","@types"]}}:t===".eslintrc"&&(a={env:{greasemonkey:!0}}),(0,g.writeFileSync)(r,JSON.stringify(a,null,2)),h.window.showInformationMessage(`\`${t}.json\` created successfully.`),m(t)}})}else h.window.showErrorMessage("No workspace folder found.","OK","Create").then(d=>{d==="Create"&&h.commands.executeCommand("workbench.action.saveWorkspaceAs").then(()=>m(t))})}var O=k(require("path"),1);function se(t){i.languages.setLanguageConfiguration("javascript",{wordPattern:/(-?\d*\.\d\w*)|([^\`\~\!\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,onEnterRules:[{beforeText:/^\/\/ (?:@|==UserScript==).*$/,action:{indentAction:i.IndentAction.None,appendText:"// "}}]}),D.push(i.commands.registerCommand("monkey-wrench.update-configs",async()=>{C.get("enable-ts-config-update")&&m("tsconfig"),C.get("enable-js-config-update")&&m("jsconfig"),C.get("enable-eslint-config-update")&&m(".eslintrc")})),q.push(i.workspace.onDidChangeConfiguration(o=>{o.affectsConfiguration("monkey-wrench.enable-ts-config-update")&&m("tsconfig"),o.affectsConfiguration("monkey-wrench.enable-js-config-update")&&m("jsconfig"),o.affectsConfiguration("monkey-wrench.enable-eslint-config-update")&&m(".eslintrc")})),F.push(i.languages.registerHoverProvider("javascript",pe),i.languages.registerHoverProvider("javascript",ue)),P.push(i.languages.registerCompletionItemProvider("javascript",de),i.languages.registerCompletionItemProvider("javascript",le),i.languages.registerCompletionItemProvider("javascript",ce," ")),E.push(i.languages.registerSignatureHelpProvider("javascript",ge,{triggerCharacters:["(",","],retriggerCharacters:[","]}),i.languages.registerSignatureHelpProvider("javascript",be,{triggerCharacters:[" "],retriggerCharacters:[" "]})),H.push(i.languages.registerDefinitionProvider("javascript",me)),W.push(i.languages.registerTypeDefinitionProvider("javascript",he)),t.subscriptions.push(...D,...q,...F,...P,...E,...H,...W)}function re(){}var D=[],q=[],F=[],P=[],E=[],H=[],W=[],C=i.workspace.getConfiguration("monkey-wrench"),b=t=>{let o=C.get("activation-condition"),d=(()=>{let n=o.fileExtensions;if(!n.length)return!0;let a=t.fileName.split(".").filter(Boolean).toSpliced(0,1,"").join(".");return n.includes(a)})(),r=o.userscriptHeader?/\/\/\s==UserScript==/.test(t.lineAt(0).text.trim()):!0;return d&&r},de={provideCompletionItems(t,o,d,r){if(!b(t))return;let n=t.getWordRangeAtPosition(o);if(!n)return;let a=t.getText(n);return y.filter(s=>s.label.startsWith(a)&&s.completions.length).map(s=>s.completions).flat().filter(s=>s.kind===i.CompletionItemKind.Function||i.CompletionItemKind.Variable)}},le={provideCompletionItems(t,o,d,r){if(!b(t))return;let n=t.getWordRangeAtPosition(o);if(!n)return;let a=t.getText(n);return f.filter(s=>s.label.startsWith(a)&&s.completions.length).map(s=>s.completions).flat().filter(s=>s.kind===i.CompletionItemKind.Field||s.kind===i.CompletionItemKind.Snippet)}},ce={provideCompletionItems(t,o,d,r){if(!b(t))return;let n=t.lineAt(o.line).text;if(n.startsWith("// @")){let a=n.match(/@\w+/);return n.substring(a[0].length+a.index).replaceAll(/\s+/g,"|").split("|").length-2>0?void 0:f.filter(l=>l.label.startsWith(a[0])&&l.completions.length).map(l=>l.completions).flat().filter(l=>l.kind===i.CompletionItemKind.Value)}}},pe={provideHover(t,o,d){if(!b(t))return;let r=t.getWordRangeAtPosition(o);if(!r)return;let n=t.getText(r),a=y.find(s=>s.label===n&&s.hover);if(a)return a.hover.range=r,a.hover}},ue={provideHover(t,o,d){if(!b(t))return;let r=t.getWordRangeAtPosition(o);if(!r)return;let n=t.getText(r),a=f.find(s=>s.label===n&&s.hover);if(a)return a.hover.range=r,a.hover}},me={provideDefinition(t,o,d){let r=t.getWordRangeAtPosition(o),n=t.getText(r);for(let a=0;a<t.lineCount;a++)if(t.lineAt(a).text.includes(`function ${n}`))return new i.Location(t.uri,new i.Position(a,0));return null}},he={async provideTypeDefinition(t,o,d){let r=t.getWordRangeAtPosition(o),n=t.getText(r),a=O.default.join(__dirname,"..","@types","tampermonkey.d.ts"),s=await i.workspace.openTextDocument(i.Uri.file(a));for(let l=0;l<s.lineCount;l++)if(s.lineAt(l).text.includes(`function ${n}`))return new i.Location(i.Uri.file(a),new i.Position(l,0));return null}},ge={provideSignatureHelp(t,o,d,r){let n=t.lineAt(o.line).text,a=n.lastIndexOf("GM",o.character),s=n.substring(a,o.character),[l,p]=s.split("("),T=p.split(",").length-1,v=new i.SignatureHelp;if(v.signatures=y.find(N=>N.label===l).signatures,!!v.signatures.length)return v.activeSignature=0,v.activeParameter=T,v}},be={provideSignatureHelp(t,o,d,r){if(!b(t))return;let n=t.lineAt(o.line).text,a=n.match(/@\w+/),s=a[0],l=a.index,p=new i.SignatureHelp;if(p.signatures=f.find(T=>T.label===s).signatures,!p.signatures.length)return;p.activeSignature=0;let w=n.substring(s.length+l).replaceAll(/\s+/g,"|").split("|").length-2;if(!(w>p.signatures[0].parameters.length-1))return p.activeParameter=w,p}};0&&(module.exports={activate,deactivate});
