{
  "version": 3,
  "sources": ["../src/extension.mjs", "../src/lib/items.mjs", "../src/lib/snippets.mjs", "../src/lib/stripIndent.mjs", "../src/lib/updateConfig.mjs"],
  "sourcesContent": ["import * as vscode from 'vscode';\nimport { metadataItems, apiItems } from './lib/items.mjs';\nimport { updateConfig } from './lib/updateConfig.mjs';\nimport path from 'path';\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Activate the extension\n * @param {vscode.ExtensionContext} context - The extension context\n */\nexport function activate(context) {\n  vscode.window.showInformationMessage('Congratulations, your extension \"Monkey Wrench\" is now active!');\n\n  vscode.languages.setLanguageConfiguration('javascript', {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    onEnterRules: [\n      {\n        beforeText: /^\\/\\/ (?:@|==UserScript==).*$/,\n        action: {\n          indentAction: vscode.IndentAction.None,\n          appendText: '// '\n        }\n      }\n    ]\n  });\n\n  commandDisposables.push(\n    vscode.commands.registerCommand('monkey-wrench.helloWorld', () => {\n      vscode.window.showInformationMessage('Hello World from Monkey Wrench!');\n    }),\n    vscode.commands.registerCommand('monkey-wrench.updateConfigs', async () => {\n      if (config.get('enableTsConfigUpdate')) {\n        updateConfig('tsconfig');\n      }\n      if (config.get('enableJsConfigUpdate')) {\n        updateConfig('jsconfig');\n      }\n      if (config.get('enableEslintConfigUpdate')) {\n        updateConfig('.eslintrc');\n      }\n    })\n  );\n\n  configDisposables.push(vscode.workspace.onDidChangeConfiguration(e => {\n    if (e.affectsConfiguration('monkey-wrench.enableTsConfigUpdate')) {\n      updateConfig('tsconfig');\n    }\n    if (e.affectsConfiguration('monkey-wrench.enableJsConfigUpdate')) {\n      updateConfig('jsconfig');\n    }\n    if (e.affectsConfiguration('monkey-wrench.enableEslintConfigUpdate')) {\n      updateConfig('.eslintrc');\n    }\n  }));\n\n  // apiItems && metadataItems\n  hoverProviders.push(\n    vscode.languages.registerHoverProvider('javascript', {\n      provideHover(document, position, token) {\n        if (!allSystemsGo(document)) return;\n        const wordRange = document.getWordRangeAtPosition(position);\n        if (!wordRange) return;\n        const word = document.getText(wordRange);\n        const item = metadataItems.find(item => item.label === word && item.hover);\n        if (!item) return;\n        item.hover.range = wordRange;\n        return item.hover;\n      }\n    }),\n    vscode.languages.registerHoverProvider('javascript', {\n      provideHover(document, position, token) {\n        if (!allSystemsGo(document)) return;\n        const wordRange = document.getWordRangeAtPosition(position);\n        if (!wordRange) return;\n        const word = document.getText(wordRange);\n        const item = apiItems.find(item => item.label === word && item.hover);\n        if (!item) return;\n        item.hover.range = wordRange;\n        return item.hover;\n      }\n    })\n  );\n\n  // apiItems && metadataItems\n  completionItemProviders.push(\n    vscode.languages.registerCompletionItemProvider('javascript', ApiCompletionItemProvider),\n    vscode.languages.registerCompletionItemProvider('javascript', MetadataCompletionItemProvider),\n    vscode.languages.registerCompletionItemProvider('javascript', MetadataParametersCompletionItemProvider, ' ')\n  );\n\n  // apiItems\n  signatureHelpProviders.push(vscode.languages.registerSignatureHelpProvider('javascript', {\n    provideSignatureHelp(document, position, token, context) {\n      const line = document.lineAt(position.line).text;\n      const functionCallStart = line.lastIndexOf('GM', position.character);\n      const functionCall = line.substring(functionCallStart, position.character);\n      const [functionName, parameterString] = functionCall.split('(');\n      const parameters = parameterString.split(',');\n      const parameterIndex = parameters.length - 1;\n      const signatureHelp = new vscode.SignatureHelp();\n      signatureHelp.signatures = apiItems.find(item => item.label === functionName).signatures;\n      if (!signatureHelp.signatures.length) return;\n      signatureHelp.activeSignature = 0;\n      signatureHelp.activeParameter = parameterIndex;\n      return signatureHelp;\n    }\n  }, { triggerCharacters: ['(', ','], retriggerCharacters: [','] }));\n\n  // metadataItems\n  signatureHelpProviders.push(vscode.languages.registerSignatureHelpProvider('javascript', {\n    provideSignatureHelp(document, position, token, context) {\n      if (!allSystemsGo(document)) return;\n      const line = document.lineAt(position.line).text;\n      const match = line.match(/@\\w+/);\n      const label = match[0];\n      const labelIndex = match.index;\n      const signatureHelp = new vscode.SignatureHelp();\n      signatureHelp.signatures = metadataItems.find(item => item.label === label).signatures;\n      if (!signatureHelp.signatures.length) return;\n      signatureHelp.activeSignature = 0;\n      let parameterIndex = line\n        .substring(label.length + labelIndex)\n        .replaceAll(/\\s+/g, '|')\n        .split('|').length - 2;\n      if (parameterIndex > signatureHelp.signatures[0].parameters.length - 1) return;\n      signatureHelp.activeParameter = parameterIndex;\n      return signatureHelp;\n    }\n  }, { triggerCharacters: [' '], retriggerCharacters: [' '] }));\n\n  definitionProviders.push(vscode.languages.registerDefinitionProvider('javascript', {\n    provideDefinition(document, position, token) {\n      const wordRange = document.getWordRangeAtPosition(position);\n      const name = document.getText(wordRange);\n  \n      for (let line = 0; line < document.lineCount; line++) {\n        const lineText = document.lineAt(line).text;\n  \n        if (lineText.includes(`function ${name}`)) {\n          return new vscode.Location(document.uri, new vscode.Position(line, 0));\n        }\n      }\n  \n      return null;\n    }\n  }));\n\n  typeDefinitionProviders.push(vscode.languages.registerTypeDefinitionProvider('javascript', {\n    async provideTypeDefinition(document, position, token) {\n      const wordRange = document.getWordRangeAtPosition(position);\n      const name = document.getText(wordRange);\n\n      const predefinedFilePath = path.join(__dirname, '@types', 'tampermonkey.d.ts');\n\n      const doc = await vscode.workspace.openTextDocument(vscode.Uri.file(predefinedFilePath));\n\n      for (let line = 0; line < doc.lineCount; line++) {\n        const lineText = doc.lineAt(line).text;\n  \n        if (lineText.includes(`function ${name}`)) {\n          return new vscode.Location(vscode.Uri.file(predefinedFilePath), new vscode.Position(line, 0));\n        }\n      }\n  \n      return null;\n    }\n  }));\n\n\tcontext.subscriptions.push(\n    ...commandDisposables,\n    ...configDisposables,\n    ...hoverProviders,\n    ...completionItemProviders,\n    ...signatureHelpProviders,\n    ...definitionProviders,\n    ...typeDefinitionProviders\n  );\n}\n\n/** Deactivate the extension */\nexport function deactivate() {\n  vscode.window.showInformationMessage('Your extension \"Monkey Wrench\" is now deactivated!');\n}\n\n/** @type {vscode.Disposable[]} */\nconst commandDisposables = [];\n\n/** @type {vscode.Disposable[]} */\nconst configDisposables = [];\n\n/** @type {vscode.Disposable[]} */\nconst hoverProviders = [];\n\n/** @type {vscode.Disposable[]} */\nconst completionItemProviders = [];\n\n/** @type {vscode.Disposable[]} */\nconst signatureHelpProviders = [];\n\n/** @type {vscode.Disposable[]} */\nconst definitionProviders = [];\n\n/** @type {vscode.Disposable[]} */\nconst typeDefinitionProviders = [];\n\nconst config = vscode.workspace.getConfiguration('monkey-wrench');\n\n/**\n * Check if the document should be processed\n * @param {vscode.TextDocument} document - The document to check\n * @returns {boolean} Whether the document should be processed\n * @example\n *   allSystemsGo(document);\n */\nconst allSystemsGo = document => {\n  const activationCondition = config.get('activationCondition');\n\n  const fileExtensionCheckPassed = (() => {\n    const activeFileExtensions = activationCondition.fileExtensions;\n    if (!activeFileExtensions.length) return true;\n    const fileExt = document.fileName.split('.').filter(Boolean).toSpliced(0, 1, '').join('.');\n    return activeFileExtensions.includes(fileExt);\n  })();\n\n  const userscriptHeaderCheckPassed = (() => {\n    if (!activationCondition.userscriptHeader) return true;\n    return /\\/\\/\\s==UserScript==/.test(document.lineAt(0).text.trim());\n  })();\n\n  return fileExtensionCheckPassed && userscriptHeaderCheckPassed;\n};\n\n// apiItems\n/** @type {vscode.CompletionItemProvider<vscode.CompletionItem>} */\nconst ApiCompletionItemProvider = {\n  provideCompletionItems(document, position, token, context) {\n    if (!allSystemsGo(document)) return;\n    let wordRange = document.getWordRangeAtPosition(position);\n    if (!wordRange) return;\n    const word = document.getText(wordRange);\n    return apiItems\n      .filter(item => item.label.startsWith(word) && item.completions.length)\n      .map(item => item.completions)\n      .flat()\n      .filter(x => x.kind === vscode.CompletionItemKind.Function || vscode.CompletionItemKind.Variable);\n  }\n};\n\n// metadataItems\n/** @type {vscode.CompletionItemProvider<vscode.CompletionItem>} */\nconst MetadataCompletionItemProvider = {\n  provideCompletionItems(document, position, token, context) {\n    if (!allSystemsGo(document)) return;\n    let wordRange = document.getWordRangeAtPosition(position);\n    if (!wordRange) return;\n    const word = document.getText(wordRange);\n    return metadataItems\n      .filter(item => item.label.startsWith(word) && item.completions.length)\n      .map(item => item.completions)\n      .flat()\n      .filter(x => x.kind === vscode.CompletionItemKind.Field || x.kind === vscode.CompletionItemKind.Snippet)\n  }\n};\n\n// metadataItems (parameters)\n/** @type {vscode.CompletionItemProvider<vscode.CompletionItem>} */\nconst MetadataParametersCompletionItemProvider = {\n  provideCompletionItems(document, position, token, context) {\n    if (!allSystemsGo(document)) return;\n    const line = document.lineAt(position.line).text;\n    if (line.startsWith('// @')) {\n      const match = line.match(/@\\w+/);\n      let parameterIndex = line\n        .substring(match[0].length + match.index)\n        .replaceAll(/\\s+/g, '|')\n        .split('|').length - 2;\n      if (parameterIndex > 0) return;\n      return metadataItems\n        .filter(item => item.label.startsWith(match[0]) && item.completions.length)\n        .map(item => item.completions)\n        .flat()\n        .filter(x => x.kind === vscode.CompletionItemKind.Value)\n    }\n  }\n};\n", "import * as vscode from 'vscode';\r\nimport * as snippets from './snippets.mjs';\r\nimport stripIndent from './stripIndent.mjs';\r\n\r\n/**\r\n * @typedef {object} Item\r\n * @property {string} label\r\n * @property {vscode.CompletionItem[]} [completions]\r\n * @property {vscode.Hover} [hover]\r\n * @property {vscode.SignatureInformation[]} [signatures]\r\n */\r\n\r\n/** @typedef {Item} MetadataItem */\r\n\r\n/** @typedef {Item} ApiItem */\r\n\r\n/** @type {MetadataItem[]} */\r\nexport const metadataItems = [\r\n  {\r\n    label: 'userscript metadata',\r\n    completions: [\r\n      {\r\n        label: 'userscript metadata',\r\n        kind: vscode.CompletionItemKind.Snippet,\r\n        detail: 'userscript.metadata: <string>',\r\n        insertText: snippets.metadata\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@name',\r\n    completions: [\r\n      {\r\n        label: '@name',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.name: <string>',\r\n        documentation: new vscode.MarkdownString('The name of the script, shown in script list and menus. It must be unique within a `@namespace`. Internationalization is done by adding an appendix naming the locale.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.name: <string>', 'typescript').appendMarkdown('The name of the script, shown in script list and menus. It must be unique within a `@namespace`. Internationalization is done by adding an appendix naming the locale.').appendCodeblock(stripIndent`\r\n          // @name     A test\r\n          // @name:de  Ein Test\r\n        `, 'javascript')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@name <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The name of the script.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@namespace',\r\n    completions: [\r\n      {\r\n        label: '@namespace',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.namespace: <string>',\r\n        documentation: new vscode.MarkdownString('The combination of `@namespace` and `@name` is the unique identifier for a userscript.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.namespace: <string>', 'typescript').appendMarkdown('The combination of `@namespace` and `@name` is the unique identifier for a userscript. `@namespace` can be any string, for example the homepage of a group of userscripts by the same author.')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@namespace <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The name of the script.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@copyright',\r\n    completions: [\r\n      {\r\n        label: '@copyright',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.copyright: <string>',\r\n        documentation: new vscode.MarkdownString('A copyright statement shown at the header of the script\\u2019s editor right below the script name.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.copyright: <string>', 'typescript').appendMarkdown('A copyright statement shown at the header of the script\\u2019s editor right below the script name.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@copyright <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The copyright statement.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@version',\r\n    completions: [\r\n      {\r\n        label: '@version',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.version: <string>',\r\n        documentation: new vscode.MarkdownString('The script version. This is used for the update check and needs to be increased at every update.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.version: <string>', 'typescript').appendMarkdown('The script version. This is used for the update check and needs to be increased at every update.\\n\\nIn this list, the next entry is considered to be a higher version number, eg: `Alpha-v1` < `Alpha-v2` and `16.4` == `16.04`.\\n\\n- `Alpha-v1`\\n- `Alpha-v2`\\n- `Alpha-v10`\\n- `Beta`\\n- `0.5pre3`\\n- `0.5prelimiary`\\n- `0.6pre4`\\n- `0.6pre5`\\n- `0.7pre4`\\n- `0.7pre10`\\n- `1.-1`\\n- `1 == 1. == 1.0 == 1.0.0`\\n- `1.1a`\\n- `1.1aa`\\n- `1.1ab`\\n- `1.1b`\\n- `1.1c`\\n- `1.1.-1`\\n- `1.1 == 1.1.0 == 1.1.00`\\n- `1.1.1.1.1`\\n- `1.1.1.1.2`\\n- `1.1.1.1`\\n- `1.10.0-alpha`\\n- `1.10 == 1.10.0`\\n- `1.11.0-0.3.7`\\n- `1.11.0-alpha`\\n- `1.11.0-alpha.1`\\n- `1.11.0-alpha+1`\\n- `1.12+1 == 1.12+1.0`\\n- `1.12+1.1 == 1.12+1.1.0`\\n- `1.12+2`\\n- `1.12+2.1`\\n- `1.12+3`\\n- `1.12+4`\\n- `1.12`\\n- `2.0`\\n- `16.4 == 16.04`\\n- `2023-08-17.alpha`\\n- `2023-08-17`\\n- `2023-08-17_14-04 == 2023-08-17_14-04.0`\\n- `2023-08-17+alpha`\\n- 2023-09-11_14-0')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@version <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The script version.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@description',\r\n    completions: [\r\n      {\r\n        label: '@description',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.description: <string>',\r\n        documentation: new vscode.MarkdownString('A brief summary to describe the script.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.description: <string>', 'typescript').appendMarkdown('A brief summary to describe the script. Internationalization is done by adding an appendix naming the locale.').appendCodeblock(stripIndent`\r\n          // @description    This userscript does wonderful things\r\n          // @description:de Dieses Userscript tut wundervolle Dinge\r\n        `, 'javascript')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@description <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'A brief summary to describe the script.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@icon',\r\n    completions: [\r\n      {\r\n        label: '@icon',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.icon: <string>',\r\n        documentation: new vscode.MarkdownString('The script icon in low resolution.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.icon: <string>', 'typescript').appendMarkdown('The script icon in low resolution.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@icon <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The url to the script icon.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@iconURL',\r\n    completions: [\r\n      {\r\n        label: '@iconURL',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.iconURL: <string>',\r\n        documentation: new vscode.MarkdownString('The script icon in low resolution.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.iconURL: <string>', 'typescript').appendMarkdown('The script icon in low resolution.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@iconURL <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The url to the script icon.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@defaulticon',\r\n    completions: [\r\n      {\r\n        label: '@defaulticon',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.defaulticon: <string>',\r\n        documentation: new vscode.MarkdownString('The script icon in low resolution.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.defaulticon: <string>', 'typescript').appendMarkdown('The script icon in low resolution.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@defaulticon <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The url to the script icon.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@icon64',\r\n    completions: [\r\n      {\r\n        label: '@icon64',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.icon64: <string>',\r\n        documentation: new vscode.MarkdownString('This script\\u2019s icon in 64x64 pixels.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.icon64: <string>', 'typescript').appendMarkdown('This script\\u2019s icon in 64x64 pixels. If `@icon` is also given, the `@icon` image will be scaled and used instead at some places at the options page.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@icon64 <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The url to the script icon.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@icon64URL',\r\n    completions: [\r\n      {\r\n        label: '@icon64URL',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.icon64URL: <string>',\r\n        documentation: new vscode.MarkdownString('This script\\u2019s icon in 64x64 pixels.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.icon64URL: <string>', 'typescript').appendMarkdown('This script\\u2019s icon in 64x64 pixels. If `@icon` is also given, the `@icon` image will be scaled and used instead at some places at the options page.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@icon64URL <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The url to the script icon.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@grant',\r\n    completions: [\r\n      {\r\n        label: '@grant',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.grant: <enum>',\r\n        documentation: new vscode.MarkdownString('`@grant` is used to whitelist `GM_*` and `GM.*` functions, the `unsafeWindow` object and some powerful `window` functions. Multiple tag instances are allowed.'),\r\n        insertText: snippets.grant,\r\n        filterText: '@grant'\r\n      },\r\n      {\r\n        label: 'GM_addElement',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_addElement'\r\n      },\r\n      {\r\n        label: 'GM_addStyle',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_addStyle'\r\n      },\r\n      {\r\n        label: 'GM_download',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_download'\r\n      },\r\n      {\r\n        label: 'GM_getResourceText',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_getResourceText'\r\n      },\r\n      {\r\n        label: 'GM_getResourceURL',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_getResourceURL'\r\n      },\r\n      {\r\n        label: 'GM_info',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_info'\r\n      },\r\n      {\r\n        label: 'GM_log',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_log'\r\n      },\r\n      {\r\n        label: 'GM_notification',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_notification'\r\n      },\r\n      {\r\n        label: 'GM_openInTab',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_openInTab'\r\n      },\r\n      {\r\n        label: 'GM_registerMenuCommand',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_registerMenuCommand'\r\n      },\r\n      {\r\n        label: 'GM_unregisterMenuCommand',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_unregisterMenuCommand'\r\n      },\r\n      {\r\n        label: 'GM_setClipboard',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_setClipboard'\r\n      },\r\n      {\r\n        label: 'GM_getTab',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_getTab'\r\n      },\r\n      {\r\n        label: 'GM_saveTab',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_saveTab'\r\n      },\r\n      {\r\n        label: 'GM_getTabs',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_getTabs'\r\n      },\r\n      {\r\n        label: 'GM_setValue',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_setValue'\r\n      },\r\n      {\r\n        label: 'GM_getValue',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_getValue'\r\n      },\r\n      {\r\n        label: 'GM_deleteValue',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_deleteValue'\r\n      },\r\n      {\r\n        label: 'GM_listValues',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_listValues'\r\n      },\r\n      {\r\n        label: 'GM_addValueChangeListener',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_addValueChangeListener'\r\n      },\r\n      {\r\n        label: 'GM_removeValueChangeListener',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_removeValueChangeListener'\r\n      },\r\n      {\r\n        label: 'GM.xmlHttpRequest',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM.xmlHttpRequest'\r\n      },\r\n      {\r\n        label: 'GM_webRequest',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_webRequest'\r\n      },\r\n      {\r\n        label: 'GM_cookie',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'GM_cookie'\r\n      },\r\n      {\r\n        label: 'window.onurlchange',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'window.onurlchange'\r\n      },\r\n      {\r\n        label: 'window.close',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'window.close'\r\n      },\r\n      {\r\n        label: 'window.focus',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'window.focus'\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.grant: <enum>', 'typescript').appendMarkdown('`@grant` is used to whitelist `GM_*` and `GM.*` functions, the `unsafeWindow` object and some powerful `window` functions. Multiple tag instances are allowed.').appendCodeblock(stripIndent`\r\n          // @grant none\r\n          // @grant GM_setValue\r\n          // @grant GM_getValue\r\n          // @grant GM.setValue\r\n          // @grant GM.getValue\r\n          // @grant GM_setClipboard\r\n          // @grant unsafeWindow\r\n          // @grant window.close\r\n          // @grant window.focus\r\n          // @grant window.onurlchange\r\n        `, 'javascript').appendMarkdown('If `@grant` is `none`, the `sandbox` is disabled. In this mode, `GM_info` will be available, but none of the `GM_*` functions will be. If no `@grant` tag is given, an empty list is assumed, however, this is different from using `none`.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@grant <enum>',\r\n        parameters: [\r\n          {\r\n            label: 'enum',\r\n            documentation: 'The name of the entity to whitelist in the script.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@author',\r\n    completions: [\r\n      {\r\n        label: '@author',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.author: <string>',\r\n        documentation: new vscode.MarkdownString('The script\\u2019s author.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.author: <string>', 'typescript').appendMarkdown('The script\\u2019s author.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@author <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The script\\u2019s author.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@homepage',\r\n    completions: [\r\n      {\r\n        label: '@homepage',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.homepage: <string>',\r\n        documentation: new vscode.MarkdownString('The author\\u2019s homepage that is used at the options page to link from the script\\u2019s name to the given page. If the `@namespace` tag starts with `http://` or `https://`, its content will be used for this too.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.homepage: <string>', 'typescript').appendMarkdown('The author\\u2019s homepage that is used at the options page to link from the script\\u2019s name to the given page. If the `@namespace` tag starts with `http://` or `https://`, its content will be used for this too.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@homepage <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL to the author\\u2019s homepage.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@homepageURL',\r\n    completions: [\r\n      {\r\n        label: '@homepageURL',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.homepageURL: <string>',\r\n        documentation: new vscode.MarkdownString('If supplied, the home icon in the userscripts list will link to this.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.homepageURL: <string>', 'typescript').appendMarkdown('If supplied, the home icon in the userscripts list will link to this.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@homepageURL <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL to the author\\u2019s homepage.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@website',\r\n    completions: [\r\n      {\r\n        label: '@website',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.website: <string>',\r\n        documentation: new vscode.MarkdownString('The author\\u2019s website that is used at the options page to link from the script\\u2019s name to the given page. If the `@namespace` tag starts with `http://` or `https://`, its content will be used for this too.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.website: <string>', 'typescript').appendMarkdown('The author\\u2019s website that is used at the options page to link from the script\\u2019s name to the given page. If the `@namespace` tag starts with `http://` or `https://`, its content will be used for this too.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@website <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL to the author\\u2019s website.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@source',\r\n    completions: [\r\n      {\r\n        label: '@source',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.source: <string>',\r\n        documentation: new vscode.MarkdownString('The source of the script that is used at the options page to link from the script\\u2019s name to the given page.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.source: <string>', 'typescript').appendMarkdown('The source of the script that is used at the options page to link from the script\\u2019s name to the given page.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@source <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL to the script\\u2019s source.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@antifeature',\r\n    completions: [\r\n      {\r\n        label: '@antifeature',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.antifeature: <enum> <string>',\r\n        documentation: new vscode.MarkdownString('Allows script developers to disclose whether they monetize their scripts (required by [GreasyFork](https://greasyfork.org/)). Internationalization is done by adding an appendix naming the locale.'),\r\n        insertText: snippets.antifeature,\r\n        filterText: '@antifeature'\r\n      },\r\n      {\r\n        label: 'ads',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'ads '\r\n      },\r\n      {\r\n        label: 'tracking',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'tracking '\r\n      },\r\n      {\r\n        label: 'miner',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'miner '\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.antifeature: <enum> <string>', 'typescript').appendMarkdown('Allows script developers to disclose whether they monetize their scripts (required by [GreasyFork](https://greasyfork.org/)). Internationalization is done by adding an appendix naming the locale.').appendCodeblock(stripIndent`\r\n          // @antifeature     ads       We show you ads\r\n          // @antifeature:fr  ads       Nous vous montrons des publicit\u00E9s\r\n          // @antifeature     tracking  We have some sort of analytics included\r\n          // @antifeature     miner     We use your computer\\u2019s resources to mine a crypto currency\r\n        `, 'javascript')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@antifeature <enum> <string>',\r\n        parameters: [\r\n          {\r\n            label: 'enum',\r\n            documentation: 'The antifeature name.'\r\n          },\r\n          {\r\n            label: 'string',\r\n            documentation: 'The antifeature description.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@require',\r\n    completions: [\r\n      {\r\n        label: '@require',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.require: <string>',\r\n        documentation: new vscode.MarkdownString('The URL to a JavaScript file that is loaded and executed before the userscript itself starts running.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.require: <string>', 'typescript').appendMarkdown('The URL to a JavaScript file that is loaded and executed before the userscript itself starts running. URL may be relative to the URL the script is being installed from. Scripts loaded via `@require` and their *\"use strict\"* statements might affect the userscript\\u2019s strict mode. See [sub-resource integrity](https://www.tampermonkey.net/documentation.php?locale=en#api:Subresource_Integrity) for information on how to ensure integrity. Multiple tag instances are allowed.').appendCodeblock(stripIndent`\r\n          // @require https://code.jquery.com/jquery-2.1.4.min.js\r\n          // @require https://code.jquery.com/jquery-2.1.3.min.js#sha256=23456...\r\n          // @require https://code.jquery.com/jquery-2.1.2.min.js#md5=34567...,sha256=6789...\r\n          // @require tampermonkey://vendor/jquery.js\r\n          // @require tampermonkey://vendor/jszip/jszip.js\r\n        `, 'javascript')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@require <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL to the JavaScript file.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@resource',\r\n    completions: [\r\n      {\r\n        label: '@resource',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.resource: <string> <string>',\r\n        documentation: new vscode.MarkdownString('Preloads resources that can by accessed via `GM_getResourceURL` and `GM_getResourceText` in the script.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.resource: <string> <string>', 'typescript').appendMarkdown('Preloads resources that can by accessed via `GM_getResourceURL` and `GM_getResourceText` in the script. See [sub-resource integrity](https://www.tampermonkey.net/documentation.php?locale=en#api:Subresource_Integrity) for information on how to ensure integrity. Multiple tag instances are allowed.').appendCodeblock(stripIndent`\r\n          // @resource icon1        http://www.tampermonkey.net/favicon.ico\r\n          // @resource icon2        /images/icon.png\r\n          // @resource html         http://www.tampermonkey.net/index.html\r\n          // @resource xml          http://www.tampermonkey.net/crx/tampermonkey.xml\r\n          // @resource SRIsecured1  http://www.tampermonkey.net/favicon.ico#md5=123434...\r\n          // @resource SRIsecured2  http://www.tampermonkey.net/favicon.ico#md5=123434...;sha256=234234...\r\n        `, 'javascript')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@resource <string> <string>',\r\n        parameters: [\r\n          {\r\n            label: [11, 17],\r\n            documentation: 'The unique name of the resource.'\r\n          },\r\n          {\r\n            label: [20, 26],\r\n            documentation: 'The URL of the resource.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@include',\r\n    completions: [\r\n      {\r\n        label: '@include',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.include: <string>',\r\n        documentation: new vscode.MarkdownString('The pages on which script should run. Multiple tag instances are allowed.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.include: <string>', 'typescript').appendMarkdown('The pages on which script should run. Multiple tag instances are allowed. `@include` doesn\\'t support the URL hash parameter. You have to match the path without the hash parameter and make use of [window.onurlchange](https://www.tampermonkey.net/documentation.php?locale=en#api:window.onurlchange).').appendCodeblock(stripIndent`\r\n          // @include http://www.tampermonkey.net/*\r\n          // @include http://*\r\n          // @include https://*\r\n          // @include /^https:\\/\\/www\\.tampermonkey\\.net\\/.*$/\r\n          // @include *\r\n        `).appendMarkdown('When writing something like `*://tmnk.net/*`, many script developers expect the script to run at `tmnk.net` only, but this is not the case. It also runs at `https://example.com/?http://tmnk.net/` as well.\\n\\nTherefore, Tampermonkey interprets `@includes` that contain a `://` a little bit like `@match`. Every `*` before `://` only matches everything except `:` characters to make sure only the URL scheme is matched. Also, if such an `@include` contains a `/` after `://`, then everything between those strings is treated as host, matching everything except `/` characters. The same applies to `*` directly following `://`.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@include <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL pattern to include.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@match',\r\n    completions: [\r\n      {\r\n        label: '@match',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.match: <string>',\r\n        documentation: new vscode.MarkdownString('The `@match` directive is a URL pattern that matches the web pages that your script should run on. Wildcards and multiple tag instances are allowed.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.match: <string>', 'typescript').appendMarkdown('The `@match` directive is a URL pattern that matches the web pages that your script should run on. Wildcards and multiple tag instances are allowed.\\n\\nSee [match patterns](https://developer.chrome.com/docs/extensions/mv2/match_patterns/) for more information. **Note:** The `<all_urls>` statement is not yet supported.').appendCodeblock(stripIndent`\r\n          // @match \\u002A://\\u002A/\\u002A\r\n          // @match https://\\u002A/\\u002A\r\n          // @match http://\\u002A/foo\\u002A\r\n          // @match https://\\u002A.tampermonkey.net/foo\\u002Abar\r\n        `, 'javascript')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@match <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'A pattern to match URLs against.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@exclude',\r\n    completions: [\r\n      {\r\n        label: '@exclude',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.exclude: <string>',\r\n        documentation: new vscode.MarkdownString('Exclude URLs even if they are included by `@include` or `@match`. Multiple tag instances are allowed.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.exclude: <string>', 'typescript').appendMarkdown('Exclude URLs even if they are included by `@include` or `@match`. Multiple tag instances are allowed.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@exclude <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL to exclude.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@run-at',\r\n    completions: [\r\n      {\r\n        label: '@run-at',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.run-at: <enum>',\r\n        documentation: new vscode.MarkdownString('Defines the moment the script is injected. In opposition to other script handlers, `@run-at` defines the first possible moment a script wants to run.'),\r\n        insertText: snippets.runAt,\r\n        filterText: '@run-at'\r\n      },\r\n      {\r\n        label: 'document-start',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'document-start'\r\n      },\r\n      {\r\n        label: 'document-body',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'document-body'\r\n      },\r\n      {\r\n        label: 'document-end',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'document-end'\r\n      },\r\n      {\r\n        label: 'document-idle',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'document-idle'\r\n      },\r\n      {\r\n        label: 'context-menu',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'context-menu'\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.run-at: <enum>', 'typescript').appendMarkdown('Defines the moment the script is injected. In opposition to other script handlers, `@run-at` defines the first possible moment a script wants to run. This means it may happen, that a script that uses the `@require` tag may be executed after the document is already loaded, because fetching the required script took that long. Regardless, all `DOMNodeInserted` and `DOMContentLoaded` events that happened after the given injection moment are cached and delivered to the script when it is injected.').appendCodeblock('// @run-at document-start').appendMarkdown('The script will be injected as fast as possible.').appendCodeblock('// @run-at document-body').appendMarkdown('The script will be injected if the body element exists.').appendCodeblock('// @run-at document-end').appendMarkdown('The script will be injected when or after the DOMContentLoaded event was dispatched.').appendCodeblock('// @run-at document-idle').appendMarkdown('The script will be injected after the DOMContentLoaded event was dispatched. This is the default value if no @run-at tag is given.').appendCodeblock('// @run-at context-menu').appendMarkdown('The script will be injected if it is clicked at the browser context menu. All `@include` and `@exclude` statements will be ignored if this value is used, but this may change in the future.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@run-at <enum>',\r\n        parameters: [\r\n          {\r\n            label: 'enum',\r\n            documentation: 'The load event during which to execute the script.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@sandbox',\r\n    completions: [\r\n      {\r\n        label: '@sandbox',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.sandbox: <enum>',\r\n        documentation: new vscode.MarkdownString('`@sandbox` allows userscript authors to specify execution context by denoting one of the three possible environments.'),\r\n        insertText: snippets.sandbox\r\n      },\r\n      {\r\n        label: 'raw',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'raw'\r\n      },\r\n      {\r\n        label: 'JavaScript',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'tracking '\r\n      },\r\n      {\r\n        label: 'DOM',\r\n        kind: vscode.CompletionItemKind.Value,\r\n        insertText: 'miner '\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.sandbox: <enum>', 'typescript').appendMarkdown('Userscript execution happens in one of three possible environments:\\n\\n- `MAIN_WORLD` - the page.\\n- `ISOLATED_WORLD` - the extension\\u2019s content script.\\n- `USERSCRIPT_WORLD` - a special context created for userscripts.\\n\\n `@sandbox` allows userscript authors to specify execution context by denoting one of the following arguments:\\n\\n- `raw` - For compatibility reasons, the userscript always needs to run in page context, the `MAIN_WORLD` (default if `@sandbox` is omitted). If injection into the `MAIN_WORLD` is not possible (e.g. because of a CSP), the userscript will be injected into other (enabled) sandboxes according to the order of this list.\\n- `JavaScript` - The script needs access to `unsafeWindow`. In Firefox, a special context, the `USERSCRIPT_WORLD`, is created which also bypasses existing CSP\\u2019s. This however, may be an issue because [`cloneInto` and `exportFunction`](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Sharing_objects_with_page_scripts) are then necessary to share objects with the page. `raw` mode is used as a fallback in other browsers.\\n- `DOM` - Use this mode if the script only needs DOM access and no direct `unsafeWindow` access. If [enabled](https://www.tampermonkey.net/faq#Q404), these scripts are executed inside the extension context, the `ISOLATED_WORLD`, or at any other enabled context otherwise, because they all grant DOM access.').appendCodeblock('// @sandbox JavaScript')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@sandbox <enum>',\r\n        parameters: [\r\n          {\r\n            label: 'enum',\r\n            documentation: 'The execution context of the script.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@connect',\r\n    completions: [\r\n      {\r\n        label: '@connect',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.connect: <string>',\r\n        documentation: new vscode.MarkdownString('The domains / subdomains which are allowed to be retrieved by `GM_xmlhttpRequest`. Top-level domains are not allowed. Multiple tag instances are allowed.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.connect: <string>', 'typescript').appendMarkdown('The domains / subdomains which are allowed to be retrieved by `GM_xmlhttpRequest`. Top-level domains are not allowed. Multiple tag instances are allowed.\\n\\nCan be:\\n- a domain name like `example.com` (this will also allow all subdomains).\\n- a subdomain name like subdomain.example.com.\\n- `self` - the current domain.\\n- localhost to access the localhost.\\n- an IP address like `127.0.0.1`.\\n- `*` - all domains.\\nIf it\\u2019s not possible to declare all domains a userscript might connect to then it\\u2019s good practice to do the following:\\n\\n1. Declare _all known_ or at least _all common_ domains that might be connected by the script to avoid the confirmation dialog for most users.\\n2. Specify `@connect *` to allow Tampermonkey to offer an \"Always allow all domains\" button.\\n\\nUsers can also whitelist all requests by adding `*` to the user domain whitelist at the script settings tab.\\n\\nBoth the initial and the final URL will be checked. For backwards compatibility to Scriptish, `@domain` tags are interpreted as well.').appendCodeblock(stripIndent`\r\n          // @connect tmnk.net\r\n          // @connect www.tampermonkey.net\r\n          // @connect self\r\n          // @connect localhost\r\n          // @connect 8.8.8.8\r\n          // @connect *\r\n        `, 'javascript')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@connect <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The domain / subdomain to be retrieved.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@noframes',\r\n    completions: [\r\n      {\r\n        label: '@noframes',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.noframes: <boolean>',\r\n        documentation: new vscode.MarkdownString('When present, the script will execute only in the top level document, and not in nested frames.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.noframes: <boolean>', 'typescript').appendMarkdown('When present, the script will execute only in the top level document, and not in nested frames.')\r\n      ],\r\n    }\r\n  },\r\n  {\r\n    label: '@updateURL',\r\n    completions: [\r\n      {\r\n        label: '@updateURL',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.updateURL: <string>',\r\n        documentation: new vscode.MarkdownString('An update URL for the userscript. A `@version` tag is required to make update checks work.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.updateURL: <string>', 'typescript').appendMarkdown('An update URL for the userscript. A `@version` tag is required to make update checks work.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@updateURL <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL to the update script.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@downloadURL',\r\n    completions: [\r\n      {\r\n        label: '@downloadURL',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.downloadURL: <string>',\r\n        documentation: new vscode.MarkdownString('Defines the URL where the script will be downloaded from when an update was detected. If the value `none` is used, then no update check will be done.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.downloadURL: <string>', 'typescript').appendMarkdown('Defines the URL where the script will be downloaded from when an update was detected. If the value `none` is used, then no update check will be done.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@downloadURL <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL to download the script from.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@supportURL',\r\n    completions: [\r\n      {\r\n        label: '@supportURL',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.supportURL: <string>',\r\n        documentation: new vscode.MarkdownString('The URL to be used for bug reporting, feature requests, etc.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.supportURL: <string>', 'typescript').appendMarkdown('The URL to be used for bug reporting, feature requests, etc.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@supportURL <string>',\r\n        parameters: [\r\n          {\r\n            label: 'string',\r\n            documentation: 'The URL for user support.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@webRequest',\r\n    completions: [\r\n      {\r\n        label: '@webRequest',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.webRequest: <object>',\r\n        documentation: new vscode.MarkdownString('`@webRequest` takes a JSON object that matches the `rule` parameter of a `GM_webRequest`. It allows the rules to apply even before the userscript is loaded.'),\r\n        insertText: snippets.webRequest\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.webRequest: <object>', 'typescript').appendMarkdown('`@webRequest` takes a JSON object that matches the `rule` parameter of a `GM_webRequest`. It allows the rules to apply even before the userscript is loaded.')\r\n      ],\r\n    },\r\n    signatures: [\r\n      {\r\n        label: '@webRequest <object>',\r\n        parameters: [\r\n          {\r\n            label: 'object',\r\n            documentation: 'A JSON object matching the `rule` parameter of a `GM_webRequest`.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: '@unwrap',\r\n    completions: [\r\n      {\r\n        label: '@unwrap',\r\n        kind: vscode.CompletionItemKind.Field,\r\n        detail: '(property) userscript.metadata.unwrap: <boolean>',\r\n        documentation: new vscode.MarkdownString('Injects the userscript into the page without any wrapper or sandbox.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('(property) userscript.metadata.unwrap: <boolean>', 'typescript').appendMarkdown('Injects the userscript into the page without any wrapper or sandbox.')\r\n      ],\r\n    }\r\n  }\r\n];\r\n\r\n/** @type {ApiItem[]} */\r\nexport const apiItems = [\r\n  {\r\n    label: 'unsafeWindow',\r\n    completions: [\r\n      {\r\n        label: 'unsafeWindow',\r\n        kind: vscode.CompletionItemKind.Variable,\r\n        detail: 'var unsafeWindow: Window & typeof globalThis',\r\n        documentation: new vscode.MarkdownString('The `unsafeWindow` object provides access to the `window` object of the page that Greasemonkey is running on, rather than the `window` object of the Greasemonkey extension.'),\r\n        commitCharacters: ['.']\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('var unsafeWindow: Window & typeof globalThis', 'typescript').appendMarkdown('The `unsafeWindow` object provides access to the `window` object of the page that Greasemonkey is running on, rather than the `window` object of the Greasemonkey extension. This can be useful in certain cases such as when a userscript needs to access a JavaScript library or variable that is defined on the page.')\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    label: 'GM_addElement',\r\n    completions: [\r\n      {\r\n        label: 'GM_addElement',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_addElement(parentNode: HTMLElement, tagName: string, attributes: { [key: string]: string | boolean | number }): HTMLElement (+1 overload)',\r\n        documentation: new vscode.MarkdownString('Creates an HTML element specified by `tagName`, applies all given `attributes`, and returns the injected HTML element.'),\r\n        insertText: snippets.addElement1\r\n      },\r\n      {\r\n        label: 'GM_addElement',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_addElement(tagName: string, attributes: { [key: string]: string | boolean | number }): HTMLElement (+1 overload)',\r\n        documentation: new vscode.MarkdownString('Creates an HTML element specified by `tagName`, applies all given `attributes`, and returns the injected HTML element.'),\r\n        insertText: snippets.addElement2\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('function GM_addElement(parentNode: HTMLElement, tagName: string, attributes: { [key: string]: string | boolean | number }): HTMLElement (+1 overload)', 'typescript').appendMarkdown('Creates an HTML element specified by `tagName`, applies all given `attributes`, and returns the injected HTML element. The injected element will be appended to the document\\u2019s head or body unless a `parentNode` is given, in which case the new element is appended to it instead. Any attribute that is valid on for the element type specified by the `tagName` is allowed in `attributes`.').appendCodeblock(stripIndent`\r\n          GM_addElement('script', {\r\n            textContent: 'window.foo = \"bar\";'\r\n          });\r\n\r\n          GM_addElement('script', {\r\n            src: 'https://example.com/script.js',\r\n            type: 'text/javascript'\r\n          });\r\n\r\n          GM_addElement(document.getElementsByTagName('div')[0], 'img', {\r\n            src: 'https://example.com/image.png'\r\n          });\r\n\r\n          GM_addElement(shadowDOM, 'style', {\r\n            textContent: 'div { color: black; };'\r\n          });\r\n        `, 'javascript')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: 'GM_addElement(parentNode: HTMLElement, tagName: string, attributes: ElementAttributes): HTMLElement',\r\n        parameters: [\r\n          {\r\n            label: 'parentNode: HTMLElement',\r\n            documentation: 'The parent node to append the new element to.'\r\n          },\r\n          {\r\n            label: 'tagName: string',\r\n            documentation: 'The type of element to create.'\r\n          },\r\n          {\r\n            label: 'attributes: ElementAttributes',\r\n            documentation: 'An object containing the attributes to apply to the new element.'\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        label: 'GM_addElement(tagName: string, attributes: ElementAttributes): HTMLElement',\r\n        parameters: [\r\n          {\r\n            label: 'tagName: string',\r\n            documentation: 'The type of element to create.'\r\n          },\r\n          {\r\n            label: 'attributes: ElementAttributes',\r\n            documentation: 'An object containing the attributes to apply to the new element.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'GM_addStyle',\r\n    completions: [\r\n      {\r\n        label: 'GM_addStyle',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_addStyle(css: string): HTMLStyleElement',\r\n        documentation: new vscode.MarkdownString('Adds the given style to the document and returns the injected style element.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('function GM_addStyle(css: string): HTMLStyleElement').appendMarkdown('Adds the given style to the document and returns the injected style element.')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: 'GM_addStyle(css: string): HTMLStyleElement',\r\n        parameters: [\r\n          {\r\n            label: 'css: string',\r\n            documentation: 'A string containing the CSS to add to the document.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'GM_download',\r\n    completions: [\r\n      {\r\n        label: 'GM_download',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_download(details: DownloadDetails): DownloadResponse (+1 overload)',\r\n        documentation: new vscode.MarkdownString('Downloads a URL to a local file.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('function GM_download(details: DownloadDetails): DownloadResponse (+1 overload)', 'typescript').appendMarkdown('Downloads a URL to a local file.').appendCodeblock(stripIndent`\r\n          GM_download('http://example.com/file.txt', 'file.txt');\r\n\r\n          const download = GM_download({\r\n            url: 'http://example.com/file.txt',\r\n            name: 'file.txt',\r\n            saveAs: true\r\n          });\r\n\r\n          // cancel download after 5 seconds\r\n          window.setTimeout(() => download.abort(), 5000);\r\n        `)\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: 'function GM_download(details: DownloadDetails): DownloadResponse (+1 overload)',\r\n        parameters: [\r\n          {\r\n            label: 'details: DownloadDetails',\r\n            documentation: new vscode.MarkdownString().appendCodeblock(stripIndent`\r\n              type DownloadDetails = {\r\n                url: string;\r\n                name: string;\r\n                headers?: { [key: string]: string };\r\n                saveAs: boolean;\r\n                conflictAction: string;\r\n                onload?: () => void;\r\n                onerror?: (error: DownloadError) => void;\r\n                onprogress?: () => void;\r\n                ontimeout?: () => void;\r\n              }\r\n            `, 'typescript').appendMarkdown('The details of the download request.')\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        label: 'function GM_download(url: string, name: string): DownloadResponse (+1 overload)',\r\n        parameters: [\r\n          {\r\n            label: 'url: string',\r\n            documentation: 'The URL to download.'\r\n          },\r\n          {\r\n            label: 'name: string',\r\n            documentation: 'The name of the file to save as.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'GM_getResourceText',\r\n    completions: [\r\n      {\r\n        label: 'GM_getResourceText',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_getResourceText(name: string): string',\r\n        documentation: new vscode.MarkdownString('Access the text of a resource (such as a JavaScript or CSS file) that has been included in a userscript via `@resource`.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('function GM_getResourceText(name: string): string', 'typescript').appendMarkdown('Access the text of a resource (such as a JavaScript or CSS file) that has been included in a userscript via `@resource`.').appendCodeblock(stripIndent`\r\n          const scriptText = GM_getResourceText('myscript.js');\r\n          const scriptText2 = await GM.getResourceText('myscript.js');\r\n          const script = document.createElement('script');\r\n          script.textContent = scriptText;\r\n          document.body.appendChild(script);\r\n        `, 'javascript')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: 'function GM_getResourceText(name: string): string',\r\n        parameters: [\r\n          {\r\n            label: 'name: string',\r\n            documentation: 'The name of the resource to retrieve.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'GM_getResourceURL',\r\n    completions: [\r\n      {\r\n        label: 'GM_getResourceURL',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_getResourceURL(name: string): string',\r\n        documentation: new vscode.MarkdownString('Access the URL of a resource (such as a CSS file or image file) that has been included in a userscript via `@resource`.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('function GM_getResourceURL(name: string): string', 'typescript').appendMarkdown('Access the URL of a resource (such as a CSS file or image file) that has been included in a userscript via `@resource`.')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: 'function GM_getResourceURL(name: string): string',\r\n        parameters: [\r\n          {\r\n            label: 'name: string',\r\n            documentation: 'The name of the resource to retrieve.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'GM_info',\r\n    completions: [\r\n      {\r\n        label: 'GM_info',\r\n        kind: vscode.CompletionItemKind.Interface,\r\n        detail: 'type GM_info = { downloadMode: string; isIncognito: boolean; relaxedCsp: string; sandboxMode: SandboxMode; script: Script; scriptHandler: string; scriptMetaStr: string | null; scriptUpdateURL: string | null; scriptWillUpdate: boolean; userAgentData: UserAgentData; version?: string; }',\r\n        documentation: new vscode.MarkdownString('An object that exposes information about the current userscript.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('type GM_info = { downloadMode: string; isIncognito: boolean; relaxedCsp: string; sandboxMode: SandboxMode; script: Script; scriptHandler: string; scriptMetaStr: string | null; scriptUpdateURL: string | null; scriptWillUpdate: boolean; userAgentData: UserAgentData; version?: string; }', 'typescript').appendMarkdown('An object that exposes information about the current userscript.')\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    label: 'GM_log',\r\n    completions: [\r\n      {\r\n        label: 'GM_log',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_log(message: any): void',\r\n        documentation: new vscode.MarkdownString('Log a message to the console.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('function GM_log(message: any): void', 'typescript').appendMarkdown('Log a message to the console.')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: 'function GM_log(message: any): void',\r\n        parameters: [\r\n          {\r\n            label: 'message: any',\r\n            documentation: 'The message to log.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'GM_notification',\r\n    completions: [\r\n      {\r\n        label: 'GM_notification',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_notification(details: NotificationDetails): void (+1 overload)',\r\n        documentation: new vscode.MarkdownString('Shows an HTML5 Desktop notification and / or highlights the current tab.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: [\r\n        new vscode.MarkdownString().appendCodeblock('function GM_notification(details: NotificationDetails): void (+1 overload)', 'typescript').appendMarkdown('Shows an HTML5 Desktop notification and / or highlights the current tab.')\r\n      ]\r\n    },\r\n    signatures: [\r\n      {\r\n        label: 'function GM_notification(details: NotificationDetails): void (+1 overload)',\r\n        parameters: [\r\n          {\r\n            label: 'details: NotificationDetails',\r\n            documentation: new vscode.MarkdownString().appendCodeblock(stripIndent`\r\n              type NotificationDetails = {\r\n                text: string;\r\n                title?: string;\r\n                tag?: string;\r\n                image?: string;\r\n                highlight?: boolean;\r\n                silent?: boolean;\r\n                timeout?: number;\r\n                url?: string;\r\n                onclick?: () => void;\r\n                ondone?: () => void;\r\n              }\r\n            `, 'typescript').appendMarkdown('The details of the notification.')\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        label: 'function GM_notification(text: string, title?: string, image?: string, onclick?: () => void): void',\r\n        parameters: [\r\n          {\r\n            label: 'text: string',\r\n            documentation: 'The text of the notification.'\r\n          },\r\n          {\r\n            label: 'title?: string',\r\n            documentation: 'The title of the notification.'\r\n          },\r\n          {\r\n            label: 'image?: string',\r\n            documentation: 'The URL of the image to display in the notification.'\r\n          },\r\n          {\r\n            label: 'onclick?: () => void',\r\n            documentation: 'A function to run when the notification is clicked.'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: 'GM_openInTab',\r\n    completions: [\r\n      {\r\n        label: 'GM_openInTab',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_openInTab(url: string, options?: OpenInTabOptions): OpenInTabResponse (+1 overload)',\r\n        documentation: new vscode.MarkdownString('Opens URL in a new tab.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_registerMenuCommand',\r\n    completions: [\r\n      {\r\n        label: 'GM_registerMenuCommand',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_registerMenuCommand(name: string, callback: () => void, options?: RegisterMenuCommandOptions): string | number (+1 overload)',\r\n        documentation: new vscode.MarkdownString(`Add a new entry to the userscript\\u2019s menu in the browser, and specify a function to be called when the menu item is selected.\\n\\nThe function return a menu entry ID that can be used to unregister the command.`)\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_unregisterMenuCommand',\r\n    completions: [\r\n      {\r\n        label: 'GM_unregisterMenuCommand',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_unregisterMenuCommand(id: string | number): void',\r\n        documentation: new vscode.MarkdownString('Unregister a menu command that was previously registered by `GM_registerMenuCommand` with the given menu command ID.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_setClipboard',\r\n    completions: [\r\n      {\r\n        label: 'GM_setClipboard',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_setClipboard(data: string, info?: string | ClipboardInfo, callback?: () => void): void',\r\n        documentation: new vscode.MarkdownString('Sets the text of the clipboard to a specified value.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_getTab',\r\n    completions: [\r\n      {\r\n        label: 'GM_getTab',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_getTab(callback: (tab: Tab) => void): void',\r\n        documentation: new vscode.MarkdownString('Get a object that is persistent as long as this tab is open.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_saveTab',\r\n    completions: [\r\n      {\r\n        label: 'GM_saveTab',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_saveTab(tab: Tab, callback?: () => void): void',\r\n        documentation: new vscode.MarkdownString('Save the tab object to reopen it after a page unload.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_getTabs',\r\n    completions: [\r\n      {\r\n        label: 'GM_getTabs',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_getTabs(callback: (tabs: Tabs) => void): void',\r\n        documentation: new vscode.MarkdownString('Get all tab objects as a hash to communicate with other script instances.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_setValue',\r\n    completions: [\r\n      {\r\n        label: 'GM_setValue',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_setValue(key: string, value: any): void',\r\n        documentation: new vscode.MarkdownString('Sets a key / value pair for current script to storage.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_getValue',\r\n    completions: [\r\n      {\r\n        label: 'GM_getValue',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_getValue(key: string, defaultValue?: any): any',\r\n        documentation: new vscode.MarkdownString('Retrieves a value for current script from storage.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_deleteValue',\r\n    completions: [\r\n      {\r\n        label: 'GM_deleteValue',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_deleteValue(key: string): void',\r\n        documentation: new vscode.MarkdownString('Deletes an existing key / value pair for current script from storage.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_listValues',\r\n    completions: [\r\n      {\r\n        label: 'GM_listValues',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_listValues(): string[]',\r\n        documentation: new vscode.MarkdownString('Returns an array of keys of all available values within this script.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_addValueChangeListener',\r\n    completions: [\r\n      {\r\n        label: 'GM_addValueChangeListener',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_addValueChangeListener(key: string, callback: (key: string, oldValue: any, newValue: any, remote: boolean) => void): string',\r\n        documentation: new vscode.MarkdownString('Adds a change listener to the storage and returns the listener ID.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_removeValueChangeListener',\r\n    completions: [\r\n      {\r\n        label: 'GM_removeValueChangeListener',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_removeValueChangeListener(id: number): void',\r\n        documentation: new vscode.MarkdownString('Removes a change listener by its ID.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_xmlHttpRequest',\r\n    completions: [\r\n      {\r\n        label: 'GM_xmlHttpRequest',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_xmlhttpRequest(details: XMLHttpRequestDetails): { abort: () => void }',\r\n        documentation: new vscode.MarkdownString('Makes a request like XMLHttpRequest, with some special capabilities, not restricted by same-origin policy.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_webRequest',\r\n    completions: [\r\n      {\r\n        label: 'GM_webRequest',\r\n        kind: vscode.CompletionItemKind.Function,\r\n        detail: 'function GM_webRequest(rules: WebRequestRule[], listener: (info: WebRequestInfo, message: WebRequestMessage, details: WebRequestDetails) => void): void',\r\n        documentation: new vscode.MarkdownString('`GM_webRequest` (re-)registers rules for web request manipulations and the listener of triggered rules. If you need to just register rules it\\'s better to use `@webRequest` header. Note, webRequest proceeds only requests with types `sub_frame`, `script`, `xhr` and `websocket`.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_cookie',\r\n    completions: [\r\n      {\r\n        label: 'GM_cookie',\r\n        kind: vscode.CompletionItemKind.Interface,\r\n        detail: 'type GM_cookie = { list(details: GM_cookie.ListDetails, callback: (cookies: Cookie[], error?: string) => void): void; set(details: GM_cookie.SetDetails, callback: (error?: string) => void): void; delete(details: GM_cookie.DeleteDetails, callback: (error?: string) => void): void; }',\r\n        documentation: new vscode.MarkdownString('Note: the GM_cookie API is experimental and might return a `not supported` error at some Tampermonkey versions.\\n\\nTampermonkey checks if the script has `@include` or `@match` access to given `details.url` arguments!')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_cookie.list',\r\n    completions: [\r\n      {\r\n        label: 'GM_cookie.list',\r\n        kind: vscode.CompletionItemKind.Method,\r\n        detail: '(method) list(details: GM_cookie.ListDetails, callback: (cookies: Cookie[], error?: string) => void): void',\r\n        documentation: new vscode.MarkdownString('Retrieve cookies.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_cookie.set',\r\n    completions: [\r\n      {\r\n        label: 'GM_cookie.set',\r\n        kind: vscode.CompletionItemKind.Method,\r\n        detail: '(method) set(details: GM_cookie.SetDetails, callback: (error?: string) => void): void',\r\n        documentation: new vscode.MarkdownString('Sets a cookie with the given details. Supported properties are defined [here](https://developer.chrome.com/extensions/cookies#method-set).')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'GM_cookie.delete',\r\n    completions: [\r\n      {\r\n        label: 'GM_cookie.delete',\r\n        kind: vscode.CompletionItemKind.Method,\r\n        detail: '(method) delete(details: GM_cookie.DeleteDetails, callback: (error?: string) => void): void',\r\n        documentation: new vscode.MarkdownString('Deletes a cookie.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'window.onurlchange',\r\n    completions: [\r\n      {\r\n        label: 'window.onurlchange',\r\n        kind: vscode.CompletionItemKind.Property,\r\n        detail: '(property) onurlchange: (this: Window, ev: CustomEvent) => any',\r\n        documentation: new vscode.MarkdownString('Fired when the URL of the tab changes.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'window.close',\r\n    completions: [\r\n      {\r\n        label: 'window.close',\r\n        kind: vscode.CompletionItemKind.Method,\r\n        detail: '(method) close(): void',\r\n        documentation: new vscode.MarkdownString('Fired when the tab is closed.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  },\r\n  {\r\n    label: 'window.focus',\r\n    completions: [\r\n      {\r\n        label: 'window.focus',\r\n        kind: vscode.CompletionItemKind.Method,\r\n        detail: '(method) focus(): void',\r\n        documentation: new vscode.MarkdownString('Fired when the tab is focused.')\r\n      }\r\n    ],\r\n    hover: {\r\n      contents: []\r\n    },\r\n    signatures: []\r\n  }\r\n];\r\n", "import * as vscode from 'vscode';\r\n\r\nconst config = vscode.workspace.getConfiguration('monkey-wrench');\r\nconst metadataConfig = config.get('metadata');\r\nconst metadata = new vscode.SnippetString()\r\n  .appendText('// ==UserScript==')\r\n  .appendText('\\n// @name         ').appendPlaceholder('Script name')\r\n  .appendText('\\n// @namespace    ').appendPlaceholder(metadataConfig.namespace)\r\n  .appendText('\\n// @version      ').appendPlaceholder('0.1')\r\n  .appendText('\\n// @description  ').appendPlaceholder('A brief summary to describe the script')\r\n  .appendText('\\n// @author       ').appendPlaceholder(metadataConfig.author)\r\n  .appendText('\\n// @match        ').appendPlaceholder('*://*/*')\r\n  .appendText('\\n// @icon         ').appendPlaceholder(metadataConfig.icon)\r\n  .appendText('\\n// @grant        ').appendPlaceholder('none')\r\n  .appendText('\\n// ==/UserScript==')\r\n  .appendText('\\n')\r\n  .appendText('\\n(function () {')\r\n  .appendText('\\n\\t\\'use strict\\';')\r\n  .appendText('\\n\\t').appendTabstop(0)\r\n  .appendText('\\n})();');\r\n\r\nconst grantChoices = [\r\n  'none',\r\n  'unsafeWindow',\r\n  'window.onurlchange',\r\n  'window.close',\r\n  'window.focus',\r\n  'GM_addElement',\r\n  'GM.addElement',\r\n  'GM_addStyle',\r\n  'GM.addStyle',\r\n  'GM_download',\r\n  'GM.download',\r\n  'GM_getResourceText',\r\n  'GM.getResourceText',\r\n  'GM_getResourceURL',\r\n  'GM.getResourceURL',\r\n  'GM_info',\r\n  'GM.info',\r\n  'GM_log',\r\n  'GM.log',\r\n  'GM_notification',\r\n  'GM.notification',\r\n  'GM_openInTab',\r\n  'GM.openInTab',\r\n  'GM_registerMenuCommand',\r\n  'GM.registerMenuCommand',\r\n  'GM_unregisterMenuCommand',\r\n  'GM.unregisterMenuCommand',\r\n  'GM_setClipboard',\r\n  'GM.setClipboard',\r\n  'GM_getTab',\r\n  'GM.getTab',\r\n  'GM_saveTab',\r\n  'GM.saveTab',\r\n  'GM_getTabs',\r\n  'GM.getTabs',\r\n  'GM_setValue',\r\n  'GM.setValue',\r\n  'GM_getValue',\r\n  'GM.getValue',\r\n  'GM_deleteValue',\r\n  'GM.deleteValue',\r\n  'GM_listValues',\r\n  'GM.listValues',\r\n  'GM_addValueChangeListener',\r\n  'GM.addValueChangeListener',\r\n  'GM_removeValueChangeListener',\r\n  'GM.removeValueChangeListener',\r\n  'GM_xmlhttpRequest',\r\n  'GM.xmlHttpRequest',\r\n  'GM_webRequest',\r\n  'GM.webRequest',\r\n  'GM_cookie',\r\n  'GM.cookie'\r\n];\r\nconst grant = new vscode.SnippetString()\r\n  .appendText('@grant ')\r\n  .appendChoice(grantChoices);\r\n\r\nconst antifeatureChoices = [\r\n  'ads',\r\n  'tracking',\r\n  'miner'\r\n];\r\nconst antifeature = new vscode.SnippetString()\r\n  .appendText('@antifeature ')\r\n  .appendChoice(antifeatureChoices);\r\n\r\nconst runAtChoices = [\r\n  'document-start',\r\n  'document-body',\r\n  'document-end',\r\n  'document-idle',\r\n  'context-menu'  \r\n];\r\nconst runAt = new vscode.SnippetString()\r\n  .appendText('@run-at ')\r\n  .appendChoice(runAtChoices);\r\n\r\nconst sandboxChoices = [\r\n  'raw',\r\n  'JavaScript',\r\n  'DOM'\r\n];\r\nconst sandbox = new vscode.SnippetString()\r\n  .appendText('@sandbox ')\r\n  .appendChoice(sandboxChoices);\r\n\r\nconst webRequest = new vscode.SnippetString()\r\n  .appendText('@webRequest { \"selector\": ')\r\n  .appendPlaceholder('selector')\r\n  .appendText(', \"action\": ')\r\n  .appendPlaceholder('action')\r\n  .appendText(' }');\r\n\r\nconst addElement1 = new vscode.SnippetString()\r\n  .appendText('GM_addElement(')\r\n  .appendPlaceholder('parentNode')\r\n  .appendText(', ')\r\n  .appendPlaceholder('tagName')\r\n  .appendText(', {\\n\\t')\r\n  .appendTabstop()\r\n  .appendText('\\n});');\r\n\r\nconst addElement2 = new vscode.SnippetString()\r\n  .appendText('GM_addElement(')\r\n  .appendPlaceholder('tagName')\r\n  .appendText(', {\\n\\t')\r\n  .appendTabstop()\r\n  .appendText('\\n});');\r\n\r\nexport {\r\n  metadata,\r\n  grant,\r\n  antifeature,\r\n  runAt,\r\n  sandbox,\r\n  webRequest,\r\n  addElement1,\r\n  addElement2\r\n};\r\n", "/** @type {StripIndent.Create} */\r\nfunction createStripIndent(options) {\r\n\r\n  /** @type {StripIndent} */\r\n  const stripIndent = (strings, ...values) => {\r\n    const { escapeSpecialCharacters = false } = options;\r\n\r\n    const lines = [...strings]\r\n      .reduce((prev, current, i) => prev + current + (values[i] || ''), '')\r\n      .split('\\n')\r\n      .filter(line => line.trim() !== '');\r\n\r\n    const minIndent = Math.min(...lines.map(line => line.match(/^\\s*/)[0].length));\r\n\r\n    return lines\r\n      .map(line => {\r\n        line = line.substring(minIndent);\r\n        if (!escapeSpecialCharacters) return line;\r\n        return line\r\n          .replace(/\\\\\\n[ \\t]*/g, '')\r\n          .replace(/\\\\`/g, '`')\r\n          .replace(/\\\\\\$/g, '$')\r\n          .replace(/\\\\\\{/g, '{');\r\n      })\r\n      .join('\\n');\r\n  }\r\n\r\n  stripIndent.withOptions = newOptions => createStripIndent({ ...options, ...newOptions });\r\n\r\n  return stripIndent;\r\n}\r\n\r\nconst stripIndent = createStripIndent({});\r\n\r\nexport default stripIndent;\r\n", "import { existsSync, readFileSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\nimport * as vscode from 'vscode';\r\n\r\n/**\r\n * Update configuration file\r\n * @param {String} configName - Configuration file name\r\n * @example\r\n *   updateConfig('jsconfig');\r\n */\r\nexport function updateConfig(configName) {\r\n  const workspaceFolders = vscode.workspace.workspaceFolders;\r\n  if (workspaceFolders && workspaceFolders.length > 0) {\r\n    const workspaceRoot = workspaceFolders[0].uri.fsPath;\r\n    const configPath = join(workspaceRoot, `${configName}.json`);\r\n\r\n    if (existsSync(configPath)) {\r\n      try {\r\n        const config = JSON.parse(readFileSync(configPath, 'utf8'));\r\n\r\n        if (configName === 'jsconfig' || configName === 'tsconfig') {\r\n          if (!config.compilerOptions) {\r\n            config.compilerOptions = {};\r\n          }\r\n          if (!config.compilerOptions.typeRoots) {\r\n            config.compilerOptions.typeRoots = [];\r\n          }\r\n\r\n          config.compilerOptions.typeRoots.push('./node_modules/@types');\r\n          config.compilerOptions.typeRoots.push('./src/@types');\r\n        } else if (configName === '.eslintrc') {\r\n          if (!config.env) {\r\n            config.env = {};\r\n          }\r\n\r\n          config.env.greasemonkey = true;\r\n        }\r\n\r\n        writeFileSync(configPath, JSON.stringify(config, null, 2));\r\n        console.log(`\\`${configName}.json\\` updated successfully.`);\r\n      } catch (err) {\r\n        vscode.window.showErrorMessage(`Error updating \\`${configName}.json\\`: ${err}`, 'OK', 'Retry').then(selection => {\r\n          if (selection === 'Retry') updateConfig(configName);\r\n        });\r\n      }\r\n    } else {\r\n      vscode.window.showErrorMessage(`No \\`${configName}.json\\` found.`, 'OK', 'Create').then(selection => {\r\n        if (selection === 'Create') {\r\n          let configObject;\r\n          if (configName === 'jsconfig' || configName === 'tsconfig') {\r\n            configObject = {\r\n              compilerOptions: {\r\n                typeRoots: [\r\n                  './node_modules/@types',\r\n                  './src/@types'\r\n                ]\r\n              }\r\n            };\r\n          } else if (configName === '.eslintrc') {\r\n            configObject = {\r\n              env: {\r\n                greasemonkey: true\r\n              }\r\n            };\r\n          }\r\n          writeFileSync(configPath, JSON.stringify(configObject, null, 2));\r\n          vscode.window.showInformationMessage(`\\`${configName}.json\\` created successfully.`);\r\n          updateConfig(configName);\r\n        }\r\n      });\r\n    }\r\n  } else {\r\n    vscode.window.showErrorMessage('No workspace folder found.', 'OK', 'Create').then(selection => {\r\n      if (selection === 'Create') {\r\n        vscode.commands.executeCommand('workbench.action.saveWorkspaceAs').then(() => updateConfig(configName));\r\n      }\r\n    });\r\n  }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,UAAwB;;;ACAxB,IAAAC,UAAwB;;;ACAxB,aAAwB;AAExB,IAAM,SAAgB,iBAAU,iBAAiB,eAAe;AAChE,IAAM,iBAAiB,OAAO,IAAI,UAAU;AAC5C,IAAM,WAAW,IAAW,qBAAc,EACvC,WAAW,mBAAmB,EAC9B,WAAW,qBAAqB,EAAE,kBAAkB,aAAa,EACjE,WAAW,qBAAqB,EAAE,kBAAkB,eAAe,SAAS,EAC5E,WAAW,qBAAqB,EAAE,kBAAkB,KAAK,EACzD,WAAW,qBAAqB,EAAE,kBAAkB,wCAAwC,EAC5F,WAAW,qBAAqB,EAAE,kBAAkB,eAAe,MAAM,EACzE,WAAW,qBAAqB,EAAE,kBAAkB,SAAS,EAC7D,WAAW,qBAAqB,EAAE,kBAAkB,eAAe,IAAI,EACvE,WAAW,qBAAqB,EAAE,kBAAkB,MAAM,EAC1D,WAAW,sBAAsB,EACjC,WAAW,IAAI,EACf,WAAW,kBAAkB,EAC7B,WAAW,kBAAqB,EAChC,WAAW,KAAM,EAAE,cAAc,CAAC,EAClC,WAAW,SAAS;AAEvB,IAAM,eAAe;AAAA,EACnqBAAc,EACpC,WAAW,SAAS,EACpB,aAAa,YAAY;AAE5B,IAAM,qBAAqB;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AACF;AACA,IAAM,cAAc,IAAW,qBAAc,EAC1C,WAAW,eAAe,EAC1B,aAAa,kBAAkB;AAElC,IAAM,eAAe;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AACA,IAAM,QAAQ,IAAW,qBAAc,EACpC,WAAW,UAAU,EACrB,aAAa,YAAY;AAE5B,IAAM,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACF;AACA,IAAM,UAAU,IAAW,qBAAc,EACtC,WAAW,WAAW,EACtB,aAAa,cAAc;AAE9B,IAAM,aAAa,IAAW,qBAAc,EACzC,WAAW,4BAA4B,EACvC,kBAAkB,UAAU,EAC5B,WAAW,cAAc,EACzB,kBAAkB,QAAQ,EAC1B,WAAW,IAAI;AAElB,IAAM,cAAc,IAAW,qBAAc,EAC1C,WAAW,gBAAgB,EAC3B,kBAAkB,YAAY,EAC9B,WAAW,IAAI,EACf,kBAAkB,SAAS,EAC3B,WAAW,QAAS,EACpB,cAAc,EACd,WAAW,OAAO;AAErB,IAAM,cAAc,IAAW,qBAAc,EAC1C,WAAW,gBAAgB,EAC3B,kBAAkB,SAAS,EAC3B,WAAW,QAAS,EACpB,cAAc,EACd,WAAW,OAAO;;;ACjIrB,SAAS,kBAAkB,SAAS;AAGlC,QAAMC,eAAc,CAAC,YAAY,WAAW;AAC1C,UAAM,EAAE,0BAA0B,MAAM,IAAI;AAE5C,UAAM,QAAQ,CAAC,GAAG,OAAO,EACtB,OAAO,CAAC,MAAM,SAAS,MAAM,OAAO,WAAW,OAAO,CAAC,KAAK,KAAK,EAAE,EACnE,MAAM,IAAI,EACV,OAAO,UAAQ,KAAK,KAAK,MAAM,EAAE;AAEpC,UAAM,YAAY,KAAK,IAAI,GAAG,MAAM,IAAI,UAAQ,KAAK,MAAM,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC;AAE7E,WAAO,MACJ,IAAI,UAAQ;AACX,aAAO,KAAK,UAAU,SAAS;AAC/B,UAAI,CAAC;AAAyB,eAAO;AACrC,aAAO,KACJ,QAAQ,eAAe,EAAE,EACzB,QAAQ,QAAQ,GAAG,EACnB,QAAQ,SAAS,GAAG,EACpB,QAAQ,SAAS,GAAG;AAAA,IACzB,CAAC,EACA,KAAK,IAAI;AAAA,EACd;AAEA,EAAAA,aAAY,cAAc,gBAAc,kBAAkB,EAAE,GAAG,SAAS,GAAG,WAAW,CAAC;AAEvF,SAAOA;AACT;AAEA,IAAM,cAAc,kBAAkB,CAAC,CAAC;AAExC,IAAO,sBAAQ;;;AFjBR,IAAM,gBAAgB;AAAA,EAC3B;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,YAAqB;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,wKAAwK;AAAA,MACnN;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,iDAAiD,YAAY,EAAE,eAAe,wKAAwK,EAAE,gBAAgB;AAAA;AAAA;AAAA,WAGjT,YAAY;AAAA,MACjB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,wFAAwF;AAAA,MACnI;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,sDAAsD,YAAY,EAAE,eAAe,+LAA+L;AAAA,MAChU;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,oGAAoG;AAAA,MAC/I;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,sDAAsD,YAAY,EAAE,eAAe,oGAAoG;AAAA,MACrO;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,kGAAkG;AAAA,MAC7I;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,oDAAoD,YAAY,EAAE,eAAe,q5BAAq5B;AAAA,MACphC;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,yCAAyC;AAAA,MACpF;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,wDAAwD,YAAY,EAAE,eAAe,+GAA+G,EAAE,gBAAgB;AAAA;AAAA;AAAA,WAG/P,YAAY;AAAA,MACjB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,oCAAoC;AAAA,MAC/E;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,iDAAiD,YAAY,EAAE,eAAe,oCAAoC;AAAA,MAChK;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,oCAAoC;AAAA,MAC/E;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,oDAAoD,YAAY,EAAE,eAAe,oCAAoC;AAAA,MACnK;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,oCAAoC;AAAA,MAC/E;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,wDAAwD,YAAY,EAAE,eAAe,oCAAoC;AAAA,MACvK;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,0CAA0C;AAAA,MACrF;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,mDAAmD,YAAY,EAAE,eAAe,0JAA0J;AAAA,MACxR;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,0CAA0C;AAAA,MACrF;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,sDAAsD,YAAY,EAAE,eAAe,0JAA0J;AAAA,MAC3R;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,gKAAgK;AAAA,QACzM,YAAqB;AAAA,QACrB,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,gDAAgD,YAAY,EAAE,eAAe,gKAAgK,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAWxS,YAAY,EAAE,eAAe,6OAA6O;AAAA,MAC/Q;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,2BAA2B;AAAA,MACtE;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,mDAAmD,YAAY,EAAE,eAAe,2BAA2B;AAAA,MACzJ;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,wNAAwN;AAAA,MACnQ;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,qDAAqD,YAAY,EAAE,eAAe,wNAAwN;AAAA,MACxV;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,uEAAuE;AAAA,MAClH;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,wDAAwD,YAAY,EAAE,eAAe,uEAAuE;AAAA,MAC1M;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,uNAAuN;AAAA,MAClQ;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,oDAAoD,YAAY,EAAE,eAAe,uNAAuN;AAAA,MACtV;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,kHAAkH;AAAA,MAC7J;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,mDAAmD,YAAY,EAAE,eAAe,kHAAkH;AAAA,MAChP;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,qMAAqM;AAAA,QAC9O,YAAqB;AAAA,QACrB,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,+DAA+D,YAAY,EAAE,eAAe,qMAAqM,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,WAK5V,YAAY;AAAA,MACjB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,uGAAuG;AAAA,MAClJ;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,oDAAoD,YAAY,EAAE,eAAe,6dAA6d,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMzmB,YAAY;AAAA,MACjB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,yGAAyG;AAAA,MACpJ;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,8DAA8D,YAAY,EAAE,eAAe,0SAA0S,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOhc,YAAY;AAAA,MACjB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO,CAAC,IAAI,EAAE;AAAA,YACd,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO,CAAC,IAAI,EAAE;AAAA,YACd,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,2EAA2E;AAAA,MACtH;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,oDAAoD,YAAY,EAAE,eAAe,2SAA4S,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAM1b,EAAE,eAAe,knBAAknB;AAAA,MACtoB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,sJAAsJ;AAAA,MACjM;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,kDAAkD,YAAY,EAAE,eAAe,iUAAiU,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,WAK3c,YAAY;AAAA,MACjB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,uGAAuG;AAAA,MAClJ;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,oDAAoD,YAAY,EAAE,eAAe,uGAAuG;AAAA,MACtO;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,uJAAuJ;AAAA,QAChM,YAAqB;AAAA,QACrB,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,iDAAiD,YAAY,EAAE,eAAe,kfAAkf,EAAE,gBAAgB,2BAA2B,EAAE,eAAe,kDAAkD,EAAE,gBAAgB,0BAA0B,EAAE,eAAe,yDAAyD,EAAE,gBAAgB,yBAAyB,EAAE,eAAe,sFAAsF,EAAE,gBAAgB,0BAA0B,EAAE,eAAe,oIAAoI,EAAE,gBAAgB,yBAAyB,EAAE,eAAe,8LAA8L;AAAA,MACj6C;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,uHAAuH;AAAA,QAChK,YAAqB;AAAA,MACvB;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,YAAY;AAAA,MACd;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,kDAAkD,YAAY,EAAE,eAAe,04CAA04C,EAAE,gBAAgB,wBAAwB;AAAA,MACjjD;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,2JAA2J;AAAA,MACtM;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,oDAAoD,YAAY,EAAE,eAAe,2gCAA2gC,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOvpC,YAAY;AAAA,MACjB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,iGAAiG;AAAA,MAC5I;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,sDAAsD,YAAY,EAAE,eAAe,iGAAiG;AAAA,MAClO;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,4FAA4F;AAAA,MACvI;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,sDAAsD,YAAY,EAAE,eAAe,4FAA4F;AAAA,MAC7N;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,uJAAuJ;AAAA,MAClM;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,wDAAwD,YAAY,EAAE,eAAe,uJAAuJ;AAAA,MAC1R;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,8DAA8D;AAAA,MACzG;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,uDAAuD,YAAY,EAAE,eAAe,8DAA8D;AAAA,MAChM;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,8JAA8J;AAAA,QACvM,YAAqB;AAAA,MACvB;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,uDAAuD,YAAY,EAAE,eAAe,8JAA8J;AAAA,MAChS;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,sEAAsE;AAAA,MACjH;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,oDAAoD,YAAY,EAAE,eAAe,sEAAsE;AAAA,MACrM;AAAA,IACF;AAAA,EACF;AACF;AAGO,IAAM,WAAW;AAAA,EACtB;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,8KAA8K;AAAA,QACvN,kBAAkB,CAAC,GAAG;AAAA,MACxB;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,gDAAgD,YAAY,EAAE,eAAe,0TAA0T;AAAA,MACrb;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,wHAAwH;AAAA,QACjK,YAAqB;AAAA,MACvB;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,wHAAwH;AAAA,QACjK,YAAqB;AAAA,MACvB;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,yJAAyJ,YAAY,EAAE,eAAe,sYAAsY,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAiBvnB,YAAY;AAAA,MACjB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,8EAA8E;AAAA,MACzH;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,qDAAqD,EAAE,eAAe,8EAA8E;AAAA,MAClM;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,kCAAkC;AAAA,MAC7E;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,kFAAkF,YAAY,EAAE,eAAe,kCAAkC,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAW9M;AAAA,MACH;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe,IAAW,uBAAe,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAYxD,YAAY,EAAE,eAAe,sCAAsC;AAAA,UACxE;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,0HAA0H;AAAA,MACrK;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,qDAAqD,YAAY,EAAE,eAAe,0HAA0H,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMvQ,YAAY;AAAA,MACjB;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,yHAAyH;AAAA,MACpK;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,oDAAoD,YAAY,EAAE,eAAe,yHAAyH;AAAA,MACxP;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,kEAAkE;AAAA,MAC7G;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,gSAAgS,YAAY,EAAE,eAAe,kEAAkE;AAAA,MAC7a;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,+BAA+B;AAAA,MAC1E;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,uCAAuC,YAAY,EAAE,eAAe,+BAA+B;AAAA,MACjJ;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,0EAA0E;AAAA,MACrH;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU;AAAA,QACR,IAAW,uBAAe,EAAE,gBAAgB,8EAA8E,YAAY,EAAE,eAAe,0EAA0E;AAAA,MACnO;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe,IAAW,uBAAe,EAAE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAaxD,YAAY,EAAE,eAAe,kCAAkC;AAAA,UACpE;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,YAAY;AAAA,UACV;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,UACA;AAAA,YACE,OAAO;AAAA,YACP,eAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,yBAAyB;AAAA,MACpE;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe;AAAA;AAAA,gFAAsN;AAAA,MACjQ;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,sHAAsH;AAAA,MACjK;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,sDAAsD;AAAA,MACjG;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,8DAA8D;AAAA,MACzG;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,uDAAuD;AAAA,MAClG;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,2EAA2E;AAAA,MACtH;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,wDAAwD;AAAA,MACnG;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,oDAAoD;AAAA,MAC/F;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,uEAAuE;AAAA,MAClH;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,sEAAsE;AAAA,MACjH;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,oEAAoE;AAAA,MAC/G;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,sCAAsC;AAAA,MACjF;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,4GAA4G;AAAA,MACvJ;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,sRAAuR;AAAA,MAClU;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,0NAA0N;AAAA,MACrQ;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,mBAAmB;AAAA,MAC9D;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,4IAA4I;AAAA,MACvL;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,mBAAmB;AAAA,MAC9D;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,wCAAwC;AAAA,MACnF;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,+BAA+B;AAAA,MAC1E;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AAAA,EACA;AAAA,IACE,OAAO;AAAA,IACP,aAAa;AAAA,MACX;AAAA,QACE,OAAO;AAAA,QACP,MAAa,2BAAmB;AAAA,QAChC,QAAQ;AAAA,QACR,eAAe,IAAW,uBAAe,gCAAgC;AAAA,MAC3E;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,IACA,YAAY,CAAC;AAAA,EACf;AACF;;;AGrvDA,gBAAwD;AACxD,kBAAqB;AACrB,IAAAC,UAAwB;AAQjB,SAAS,aAAa,YAAY;AACvC,QAAM,mBAA0B,kBAAU;AAC1C,MAAI,oBAAoB,iBAAiB,SAAS,GAAG;AACnD,UAAM,gBAAgB,iBAAiB,CAAC,EAAE,IAAI;AAC9C,UAAM,iBAAa,kBAAK,eAAe,GAAG,UAAU,OAAO;AAE3D,YAAI,sBAAW,UAAU,GAAG;AAC1B,UAAI;AACF,cAAMC,UAAS,KAAK,UAAM,wBAAa,YAAY,MAAM,CAAC;AAE1D,YAAI,eAAe,cAAc,eAAe,YAAY;AAC1D,cAAI,CAACA,QAAO,iBAAiB;AAC3B,YAAAA,QAAO,kBAAkB,CAAC;AAAA,UAC5B;AACA,cAAI,CAACA,QAAO,gBAAgB,WAAW;AACrC,YAAAA,QAAO,gBAAgB,YAAY,CAAC;AAAA,UACtC;AAEA,UAAAA,QAAO,gBAAgB,UAAU,KAAK,uBAAuB;AAC7D,UAAAA,QAAO,gBAAgB,UAAU,KAAK,cAAc;AAAA,QACtD,WAAW,eAAe,aAAa;AACrC,cAAI,CAACA,QAAO,KAAK;AACf,YAAAA,QAAO,MAAM,CAAC;AAAA,UAChB;AAEA,UAAAA,QAAO,IAAI,eAAe;AAAA,QAC5B;AAEA,qCAAc,YAAY,KAAK,UAAUA,SAAQ,MAAM,CAAC,CAAC;AACzD,gBAAQ,IAAI,KAAK,UAAU,+BAA+B;AAAA,MAC5D,SAAS,KAAK;AACZ,QAAO,eAAO,iBAAiB,oBAAoB,UAAU,YAAY,GAAG,IAAI,MAAM,OAAO,EAAE,KAAK,eAAa;AAC/G,cAAI,cAAc;AAAS,yBAAa,UAAU;AAAA,QACpD,CAAC;AAAA,MACH;AAAA,IACF,OAAO;AACL,MAAO,eAAO,iBAAiB,QAAQ,UAAU,kBAAkB,MAAM,QAAQ,EAAE,KAAK,eAAa;AACnG,YAAI,cAAc,UAAU;AAC1B,cAAI;AACJ,cAAI,eAAe,cAAc,eAAe,YAAY;AAC1D,2BAAe;AAAA,cACb,iBAAiB;AAAA,gBACf,WAAW;AAAA,kBACT;AAAA,kBACA;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF,WAAW,eAAe,aAAa;AACrC,2BAAe;AAAA,cACb,KAAK;AAAA,gBACH,cAAc;AAAA,cAChB;AAAA,YACF;AAAA,UACF;AACA,uCAAc,YAAY,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AAC/D,UAAO,eAAO,uBAAuB,KAAK,UAAU,+BAA+B;AACnF,uBAAa,UAAU;AAAA,QACzB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,OAAO;AACL,IAAO,eAAO,iBAAiB,8BAA8B,MAAM,QAAQ,EAAE,KAAK,eAAa;AAC7F,UAAI,cAAc,UAAU;AAC1B,QAAO,iBAAS,eAAe,kCAAkC,EAAE,KAAK,MAAM,aAAa,UAAU,CAAC;AAAA,MACxG;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;AJ3EA,IAAAC,eAAiB;AAQV,SAAS,SAAS,SAAS;AAChC,EAAO,eAAO,uBAAuB,gEAAgE;AAErG,EAAO,kBAAU,yBAAyB,cAAc;AAAA,IACtD,aAAa;AAAA,IACb,cAAc;AAAA,MACZ;AAAA,QACE,YAAY;AAAA,QACZ,QAAQ;AAAA,UACN,cAAqB,qBAAa;AAAA,UAClC,YAAY;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAED,qBAAmB;AAAA,IACV,iBAAS,gBAAgB,4BAA4B,MAAM;AAChE,MAAO,eAAO,uBAAuB,iCAAiC;AAAA,IACxE,CAAC;AAAA,IACM,iBAAS,gBAAgB,+BAA+B,YAAY;AACzE,UAAIC,QAAO,IAAI,sBAAsB,GAAG;AACtC,qBAAa,UAAU;AAAA,MACzB;AACA,UAAIA,QAAO,IAAI,sBAAsB,GAAG;AACtC,qBAAa,UAAU;AAAA,MACzB;AACA,UAAIA,QAAO,IAAI,0BAA0B,GAAG;AAC1C,qBAAa,WAAW;AAAA,MAC1B;AAAA,IACF,CAAC;AAAA,EACH;AAEA,oBAAkB,KAAY,kBAAU,yBAAyB,OAAK;AACpE,QAAI,EAAE,qBAAqB,oCAAoC,GAAG;AAChE,mBAAa,UAAU;AAAA,IACzB;AACA,QAAI,EAAE,qBAAqB,oCAAoC,GAAG;AAChE,mBAAa,UAAU;AAAA,IACzB;AACA,QAAI,EAAE,qBAAqB,wCAAwC,GAAG;AACpE,mBAAa,WAAW;AAAA,IAC1B;AAAA,EACF,CAAC,CAAC;AAGF,iBAAe;AAAA,IACN,kBAAU,sBAAsB,cAAc;AAAA,MACnD,aAAa,UAAU,UAAU,OAAO;AACtC,YAAI,CAAC,aAAa,QAAQ;AAAG;AAC7B,cAAM,YAAY,SAAS,uBAAuB,QAAQ;AAC1D,YAAI,CAAC;AAAW;AAChB,cAAM,OAAO,SAAS,QAAQ,SAAS;AACvC,cAAM,OAAO,cAAc,KAAK,CAAAC,UAAQA,MAAK,UAAU,QAAQA,MAAK,KAAK;AACzE,YAAI,CAAC;AAAM;AACX,aAAK,MAAM,QAAQ;AACnB,eAAO,KAAK;AAAA,MACd;AAAA,IACF,CAAC;AAAA,IACM,kBAAU,sBAAsB,cAAc;AAAA,MACnD,aAAa,UAAU,UAAU,OAAO;AACtC,YAAI,CAAC,aAAa,QAAQ;AAAG;AAC7B,cAAM,YAAY,SAAS,uBAAuB,QAAQ;AAC1D,YAAI,CAAC;AAAW;AAChB,cAAM,OAAO,SAAS,QAAQ,SAAS;AACvC,cAAM,OAAO,SAAS,KAAK,CAAAA,UAAQA,MAAK,UAAU,QAAQA,MAAK,KAAK;AACpE,YAAI,CAAC;AAAM;AACX,aAAK,MAAM,QAAQ;AACnB,eAAO,KAAK;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH;AAGA,0BAAwB;AAAA,IACf,kBAAU,+BAA+B,cAAc,yBAAyB;AAAA,IAChF,kBAAU,+BAA+B,cAAc,8BAA8B;AAAA,IACrF,kBAAU,+BAA+B,cAAc,0CAA0C,GAAG;AAAA,EAC7G;AAGA,yBAAuB,KAAY,kBAAU,8BAA8B,cAAc;AAAA,IACvF,qBAAqB,UAAU,UAAU,OAAOC,UAAS;AACvD,YAAM,OAAO,SAAS,OAAO,SAAS,IAAI,EAAE;AAC5C,YAAM,oBAAoB,KAAK,YAAY,MAAM,SAAS,SAAS;AACnE,YAAM,eAAe,KAAK,UAAU,mBAAmB,SAAS,SAAS;AACzE,YAAM,CAAC,cAAc,eAAe,IAAI,aAAa,MAAM,GAAG;AAC9D,YAAM,aAAa,gBAAgB,MAAM,GAAG;AAC5C,YAAM,iBAAiB,WAAW,SAAS;AAC3C,YAAM,gBAAgB,IAAW,sBAAc;AAC/C,oBAAc,aAAa,SAAS,KAAK,UAAQ,KAAK,UAAU,YAAY,EAAE;AAC9E,UAAI,CAAC,cAAc,WAAW;AAAQ;AACtC,oBAAc,kBAAkB;AAChC,oBAAc,kBAAkB;AAChC,aAAO;AAAA,IACT;AAAA,EACF,GAAG,EAAE,mBAAmB,CAAC,KAAK,GAAG,GAAG,qBAAqB,CAAC,GAAG,EAAE,CAAC,CAAC;AAGjE,yBAAuB,KAAY,kBAAU,8BAA8B,cAAc;AAAA,IACvF,qBAAqB,UAAU,UAAU,OAAOA,UAAS;AACvD,UAAI,CAAC,aAAa,QAAQ;AAAG;AAC7B,YAAM,OAAO,SAAS,OAAO,SAAS,IAAI,EAAE;AAC5C,YAAM,QAAQ,KAAK,MAAM,MAAM;AAC/B,YAAM,QAAQ,MAAM,CAAC;AACrB,YAAM,aAAa,MAAM;AACzB,YAAM,gBAAgB,IAAW,sBAAc;AAC/C,oBAAc,aAAa,cAAc,KAAK,UAAQ,KAAK,UAAU,KAAK,EAAE;AAC5E,UAAI,CAAC,cAAc,WAAW;AAAQ;AACtC,oBAAc,kBAAkB;AAChC,UAAI,iBAAiB,KAClB,UAAU,MAAM,SAAS,UAAU,EACnC,WAAW,QAAQ,GAAG,EACtB,MAAM,GAAG,EAAE,SAAS;AACvB,UAAI,iBAAiB,cAAc,WAAW,CAAC,EAAE,WAAW,SAAS;AAAG;AACxE,oBAAc,kBAAkB;AAChC,aAAO;AAAA,IACT;AAAA,EACF,GAAG,EAAE,mBAAmB,CAAC,GAAG,GAAG,qBAAqB,CAAC,GAAG,EAAE,CAAC,CAAC;AAE5D,sBAAoB,KAAY,kBAAU,2BAA2B,cAAc;AAAA,IACjF,kBAAkB,UAAU,UAAU,OAAO;AAC3C,YAAM,YAAY,SAAS,uBAAuB,QAAQ;AAC1D,YAAM,OAAO,SAAS,QAAQ,SAAS;AAEvC,eAAS,OAAO,GAAG,OAAO,SAAS,WAAW,QAAQ;AACpD,cAAM,WAAW,SAAS,OAAO,IAAI,EAAE;AAEvC,YAAI,SAAS,SAAS,YAAY,IAAI,EAAE,GAAG;AACzC,iBAAO,IAAW,iBAAS,SAAS,KAAK,IAAW,iBAAS,MAAM,CAAC,CAAC;AAAA,QACvE;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF,CAAC,CAAC;AAEF,0BAAwB,KAAY,kBAAU,+BAA+B,cAAc;AAAA,IACzF,MAAM,sBAAsB,UAAU,UAAU,OAAO;AACrD,YAAM,YAAY,SAAS,uBAAuB,QAAQ;AAC1D,YAAM,OAAO,SAAS,QAAQ,SAAS;AAEvC,YAAM,qBAAqB,aAAAC,QAAK,KAAK,WAAW,UAAU,mBAAmB;AAE7E,YAAM,MAAM,MAAa,kBAAU,iBAAwB,YAAI,KAAK,kBAAkB,CAAC;AAEvF,eAAS,OAAO,GAAG,OAAO,IAAI,WAAW,QAAQ;AAC/C,cAAM,WAAW,IAAI,OAAO,IAAI,EAAE;AAElC,YAAI,SAAS,SAAS,YAAY,IAAI,EAAE,GAAG;AACzC,iBAAO,IAAW,iBAAgB,YAAI,KAAK,kBAAkB,GAAG,IAAW,iBAAS,MAAM,CAAC,CAAC;AAAA,QAC9F;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAAA,EACF,CAAC,CAAC;AAEH,UAAQ,cAAc;AAAA,IACnB,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AACF;AAGO,SAAS,aAAa;AAC3B,EAAO,eAAO,uBAAuB,oDAAoD;AAC3F;AAGA,IAAM,qBAAqB,CAAC;AAG5B,IAAM,oBAAoB,CAAC;AAG3B,IAAM,iBAAiB,CAAC;AAGxB,IAAM,0BAA0B,CAAC;AAGjC,IAAM,yBAAyB,CAAC;AAGhC,IAAM,sBAAsB,CAAC;AAG7B,IAAM,0BAA0B,CAAC;AAEjC,IAAMH,UAAgB,kBAAU,iBAAiB,eAAe;AAShE,IAAM,eAAe,cAAY;AAC/B,QAAM,sBAAsBA,QAAO,IAAI,qBAAqB;AAE5D,QAAM,4BAA4B,MAAM;AACtC,UAAM,uBAAuB,oBAAoB;AACjD,QAAI,CAAC,qBAAqB;AAAQ,aAAO;AACzC,UAAM,UAAU,SAAS,SAAS,MAAM,GAAG,EAAE,OAAO,OAAO,EAAE,UAAU,GAAG,GAAG,EAAE,EAAE,KAAK,GAAG;AACzF,WAAO,qBAAqB,SAAS,OAAO;AAAA,EAC9C,GAAG;AAEH,QAAM,+BAA+B,MAAM;AACzC,QAAI,CAAC,oBAAoB;AAAkB,aAAO;AAClD,WAAO,uBAAuB,KAAK,SAAS,OAAO,CAAC,EAAE,KAAK,KAAK,CAAC;AAAA,EACnE,GAAG;AAEH,SAAO,4BAA4B;AACrC;AAIA,IAAM,4BAA4B;AAAA,EAChC,uBAAuB,UAAU,UAAU,OAAO,SAAS;AACzD,QAAI,CAAC,aAAa,QAAQ;AAAG;AAC7B,QAAI,YAAY,SAAS,uBAAuB,QAAQ;AACxD,QAAI,CAAC;AAAW;AAChB,UAAM,OAAO,SAAS,QAAQ,SAAS;AACvC,WAAO,SACJ,OAAO,UAAQ,KAAK,MAAM,WAAW,IAAI,KAAK,KAAK,YAAY,MAAM,EACrE,IAAI,UAAQ,KAAK,WAAW,EAC5B,KAAK,EACL,OAAO,OAAK,EAAE,SAAgB,2BAAmB,YAAmB,2BAAmB,QAAQ;AAAA,EACpG;AACF;AAIA,IAAM,iCAAiC;AAAA,EACrC,uBAAuB,UAAU,UAAU,OAAO,SAAS;AACzD,QAAI,CAAC,aAAa,QAAQ;AAAG;AAC7B,QAAI,YAAY,SAAS,uBAAuB,QAAQ;AACxD,QAAI,CAAC;AAAW;AAChB,UAAM,OAAO,SAAS,QAAQ,SAAS;AACvC,WAAO,cACJ,OAAO,UAAQ,KAAK,MAAM,WAAW,IAAI,KAAK,KAAK,YAAY,MAAM,EACrE,IAAI,UAAQ,KAAK,WAAW,EAC5B,KAAK,EACL,OAAO,OAAK,EAAE,SAAgB,2BAAmB,SAAS,EAAE,SAAgB,2BAAmB,OAAO;AAAA,EAC3G;AACF;AAIA,IAAM,2CAA2C;AAAA,EAC/C,uBAAuB,UAAU,UAAU,OAAO,SAAS;AACzD,QAAI,CAAC,aAAa,QAAQ;AAAG;AAC7B,UAAM,OAAO,SAAS,OAAO,SAAS,IAAI,EAAE;AAC5C,QAAI,KAAK,WAAW,MAAM,GAAG;AAC3B,YAAM,QAAQ,KAAK,MAAM,MAAM;AAC/B,UAAI,iBAAiB,KAClB,UAAU,MAAM,CAAC,EAAE,SAAS,MAAM,KAAK,EACvC,WAAW,QAAQ,GAAG,EACtB,MAAM,GAAG,EAAE,SAAS;AACvB,UAAI,iBAAiB;AAAG;AACxB,aAAO,cACJ,OAAO,UAAQ,KAAK,MAAM,WAAW,MAAM,CAAC,CAAC,KAAK,KAAK,YAAY,MAAM,EACzE,IAAI,UAAQ,KAAK,WAAW,EAC5B,KAAK,EACL,OAAO,OAAK,EAAE,SAAgB,2BAAmB,KAAK;AAAA,IAC3D;AAAA,EACF;AACF;",
  "names": ["vscode", "vscode", "stripIndent", "vscode", "config", "import_path", "config", "item", "context", "path"]
}
