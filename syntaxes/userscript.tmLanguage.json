{
  "$schema": "./tmlanguage.json",
  "name": "UserScript",
  "scopeName": "source.js.user",
  "injectionSelector": "L:source.js -comment -(string -meta.embedded), L:source.ts -comment -(string -meta.embedded)",
  "fileTypes": [
    "user.js"
  ],
  "repository": {
    "regex": {
      "patterns": [
        {
          "name": "string.regexp.js",
          "begin": "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.js"
            }
          },
          "end": "(/)([dgimsuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js"
            },
            "2": {
              "name": "keyword.other.js"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "string.regexp.js",
          "begin": "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.js"
            }
          },
          "end": "(/)([dgimsuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js"
            },
            "2": {
              "name": "keyword.other.js"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        }
      ]
    },
    "regexp": {
      "patterns": [
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\\\[bB]|\\^|\\$"
        },
        {
          "match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
          "captures": {
            "0": {
              "name": "keyword.other.back-reference.regexp"
            },
            "1": {
              "name": "variable.other.regexp"
            }
          }
        },
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
        },
        {
          "name": "keyword.operator.or.regexp",
          "match": "\\|"
        },
        {
          "name": "meta.group.assertion.regexp",
          "begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            },
            "2": {
              "name": "punctuation.definition.group.assertion.regexp"
            },
            "3": {
              "name": "meta.assertion.look-ahead.regexp"
            },
            "4": {
              "name": "meta.assertion.negative-look-ahead.regexp"
            },
            "5": {
              "name": "meta.assertion.look-behind.regexp"
            },
            "6": {
              "name": "meta.assertion.negative-look-behind.regexp"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "meta.group.regexp",
          "begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            },
            "1": {
              "name": "punctuation.definition.group.no-capture.regexp"
            },
            "2": {
              "name": "variable.other.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "constant.other.character-class.set.regexp",
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            }
          },
          "patterns": [
            {
              "name": "constant.other.character-class.range.regexp",
              "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
              "captures": {
                "1": {
                  "name": "constant.character.numeric.regexp"
                },
                "2": {
                  "name": "constant.character.control.regexp"
                },
                "3": {
                  "name": "constant.character.escape.backslash.regexp"
                },
                "4": {
                  "name": "constant.character.numeric.regexp"
                },
                "5": {
                  "name": "constant.character.control.regexp"
                },
                "6": {
                  "name": "constant.character.escape.backslash.regexp"
                }
              }
            },
            {
              "include": "#regex-character-class"
            }
          ]
        },
        {
          "include": "#regex-character-class"
        }
      ]
    },
    "regex-character-class": {
      "patterns": [
        {
          "name": "constant.other.character-class.regexp",
          "match": "\\\\[wWsSdDtrnvf]|\\."
        },
        {
          "name": "constant.character.numeric.regexp",
          "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
        },
        {
          "name": "constant.character.control.regexp",
          "match": "\\\\c[A-Z]"
        },
        {
          "name": "constant.character.escape.backslash.regexp",
          "match": "\\\\."
        }
      ]
    }
  },
  "patterns": [
    {
      "begin": "^//\\s*==UserScript==$",
      "beginCaptures": {
        "0": {
          "name": "comment.block.documentation.js"
        }
      },
      "end": "^//\\s*==/UserScript==$",
      "endCaptures": {
        "0": {
          "name": "comment.block.documentation.js"
        }
      },
      "patterns": [
        {
          "match": "^// (@)(namespace|name|name:\\w{2}|copyright|version|description|description:\\w{2}|icon|iconURL|defaulticon|icon64|icon64URL|homepage|homepageURL|website|source|require|connect|updateURL|downloadURL|supportURL|webRequest)(?:[ ]+(.*))$",
          "captures": {
            "0": {
              "name": "comment.block.documentation.js"
            },
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "storage.type.class.jsdoc"
            },
            "3": {
              "name": "comment.block.documentation.js"
            }
          }
        },
        {
          "match": "^// (@)(include|match|exclude)(?:[ ]+(.*))$",
          "captures": {
            "0": {
              "name": "comment.block.documentation.js"
            },
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "storage.type.class.jsdoc"
            },
            "3": {
              "patterns": [
                {
                  "name": "string.regexp.js",
                  "match": "[a-zA-Z0-9-_:/]+"
                },
                {
                  "include": "#regexp"
                }
              ]
            }
          }
        },
        {
          "match": "^// (@)(namespace|name|name:\\w{2}|grant|author|run-at|sandbox)(?:[ ]+(.*))$",
          "captures": {
            "0": {
              "name": "comment.block.documentation.js"
            },
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "storage.type.class.jsdoc"
            },
            "3": {
              "name": "entity.name.type.jsdoc"
            }
          }
        },
        {
          "match": "^// (@)(noframes|unwrap)$",
          "captures": {
            "0": {
              "name": "comment.block.documentation.js"
            },
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "storage.type.class.jsdoc"
            }
          }
        },
        {
          "match": "^// (@)(antifeature|antifeature:\\w{2}|resource)(?:[ ]+([^\n ]*)[ ]+([^\n ]*))$",
          "captures": {
            "0": {
              "name": "comment.block.documentation.js"
            },
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "storage.type.class.jsdoc"
            },
            "3": {
              "name": "entity.name.type.jsdoc"
            },
            "4": {
              "name": "comment.block.documentation.js"
            }
          }
        },
        {
          "match": "^//.*$",
          "captures": {
            "0": {
              "name": "comment.block.documentation.js"
            }
          }
        }
      ]
    },
    {
      "begin": "(?:(GM[_\\.]addStyle)\\s*(\\())",
      "end": "(?:(\\)))",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.js"
        },
        "2": {
          "name": "meta.brace.round.js"
        }
      },
      "endCaptures": {
        "1": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "begin": "(\"|'|`)",
          "beginCaptures": {
            "0": {
              "name": "string.template.js"
            },
            "1": {
              "name": "punctuation.definition.string.begin.js"
            }
          },
          "contentName": "source.css",
          "end": "((\\1))",
          "endCaptures": {
            "0": {
              "name": "string.template.js"
            },
            "1": {
              "name": "punctuation.definition.string.end.js"
            }
          },
          "patterns": [
            {
              "include": "source.css"
            }
          ]
        },
        {
          "include": "source.js"
        }
      ]
    },
    {
      "begin": "(css)(`)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.tagged-template.js"
        },
        "2": {
          "name": "punctuation.definition.string.template.begin.js"
        }
      },
      "contentName": "source.css",
      "end": "((`))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.template.end.js"
        }
      },
      "patterns": [
        {
          "include": "source.css"
        }
      ]
    }
  ]
}